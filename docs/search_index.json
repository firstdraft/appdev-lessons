[["index.html", "AD1 Preface", " AD1 Ben + Raghu Preface This is the basic outline of a “Lesson” in the planned LMS app, including the syntax for LTI placement and quiz questions class Person attr_accessor :first_name, :last_name def full_name &quot;#{first_name} #{last_name}&quot; end end Bullets More bullets A paragraph. LTI{Launch the tool}(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(20)[foo]{400} Bullets More bullets LTI{ }(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(10)[bar] "],["choose-one.html", "Choose one", " Choose one First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option This is not correct because of xyz reason {: .choose_best #bin points=“30” answer=“3” } "],["choose-all-that-apply.html", "Choose all that apply", " Choose all that apply First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option That’s right! Because of xyz reason {: .choose_all #baz points=“30” answer=“[3, 4]” } "],["appdev-outline.html", "1 AppDev Outline", " 1 AppDev Outline This document is a chronological outline of the AppDev course content, based on the Canvas material for “BUSN 36110 81 (Summer 2022) Application Development”. "],["diátaxis.html", "1.1 Diátaxis", " 1.1 Diátaxis In an effort towards Diátaxis, the content is identified by small chunks of material and tags are used in the section headers. We should strive to keep these all separated. (da=“Tutorial”) pratical-study quadrant practical guided tutorials that produce meaningful results avoid abstraction, generalization, explanation, choices (da=“HowTo”) pratical-work quadrant similar to tutorial, but more concise with no digression or teaching (da=“Explain”) theoretical-study quadrant understanding-oriented discussions referring to big-picture topics include concepts, connections, abstraction, generalzation, alternatives, optional readings (da=“TechRef”) theoretical-work quadrant indexes, glossaries, dictionaries pure information, concise, no ambiguity, provide examples (da=“Exercise”) our own this is not part of the cannon, but we add it One could argue that “Exercises” are an offshoot of “Tutorials”. But I keep them separated for now. Note, the difference between “Tutorials” and “HowTo” here. Both describe a sequence of actions and are done hands-on. They are distinguished by the user needs: study (“Tutorial”) vs. work (“HowTo”). Tutorials provide a learning experience, how-to-guides help the user accomplish a task. For us, the line is blurry, but a breakdown could be that any gitpod and other videos are “Tutorials” and the written accompaniment is a “HowTo”. How-to-guides should never be videos, because a user should be able to quickly refer to what they need, without buffering or scrubbing. "],["the-structure.html", "1.2 The structure", " 1.2 The structure The outline is ordered with heading levels like so: # Week ## Topic ### Video Segment (tutorial or explanation) #### Text Companion (how-to if tutorial, otherwise written explanation, always concise) Exercises are also peppered into the structure. See next section for technical references. "],["technical-references-code-vs.-terminology.html", "1.3 Technical References: Code vs. Terminology", " 1.3 Technical References: Code vs. Terminology There are two types of technical references. One is for terms, the terminology reference, which can be related to specific programming languages, however, any examples of HTML tags, Ruby methods, etc. should go into the code reference. There is one code reference for each subject area: HTML, CSS, Ruby, etc. Both of these glossaries could be built up through the class, meaning the students would only see the most recent terms and those introduced previously. By the end, this is a long glossary sectioned by course units. These code references already exist: Ruby: Ruby Foundations Slides the-one-reference.md optional-syntaxes-in-ruby.rb HTML + CSS: HTML + CSS Recap Slides html-reference.md html-cheatsheet.md classbook.md "],["whats-missing.html", "1.4 What’s missing?", " 1.4 What’s missing? Running list of things TODO: The location(s) of the technical references (“TechRef”), and how they are built up Command-line basics could just be a short “Tutorial” video along with a “TechRef” of all the commands shown in the course place to explain directory structure and filepaths Dedicated video + text content of technical setup. Gitpod and github accounts, opening gitpod workspace, tab organization, /git commiting, rails grade, etc. Can be done with “RPS HTML” or “String” as example. See “Gitpod Technical Setup” topic in “Week 1” below. Dedicated video + text content of gems and Gemfile (and maybe bundle). This is found throughout content right now. CSS reference, there is some here: classbook.md Text doc with “keyboard magic” commands (e.g., TAB completion, opening/clearing terminal). Dedicated video + text for ideas.firstdraft.com with domain model for OfferUp. See Week 6\" topic “Domain Modeling” Video tutorial for https://association-accessors.firstdraft.com/. This is in the last 10 minutes of Day 7 recording right now. Maybe a dedicated chapter for belongs_to, has_many, scope, through, and use of .joins() for queries. Dedicated video + text content for starting from scratch, generator resources, and migration. This is spread across videos (e.g., Day 7 video, Day 8 short video, Photogram and MSM signin), chapters (e.g., active-record.md, draft-generators.md, draft-account.md), classroom examples (Day 8 recordings). See “Week 8” topic “Starting from Scratch with Generators” below. API videos for Mailgun, Twilio, etc. Print stylesheet applied to any lesson to make hard copies (pdf) Heroku alternative video / writeup "],["course-overview.html", "2 Course Overview", " 2 Course Overview (da=“Explain”) Bird’s Eye View Slides (https://slides.com/raghubetina/01-birds-eye-view?token=u4vg--N6) 01-09: Course intro 10-15: What does it mean to know how to code? 16-21: SaaS 22-26: URLs 27-33: Raghu’s journey 34-40: How learning SaaS has evolved 41-46: Ruby on Rails, Play the whole game 47-49: Teaching team 50-79: Record keeping (history, tables, databases, domain modeling, CRUD) 80-88: Must See Movies example relational database tables "],["gitpod-technical-setup.html", "3 Gitpod Technical Setup", " 3 Gitpod Technical Setup Most of this is in the RPS HTML video, but it could have dedicated content Some of this is also in “Assignment Week 3 (pre-class) Part 3: String” video Chapters: day-2-notes.md rails-grade.md fixing-your-organization-permissions.md gitpod-snapshot.md hard-reload.md "],["video-segment-setting-up-accounts-datutorial.html", "3.1 Video Segment: Setting Up Accounts (da=“Tutorial”)", " 3.1 Video Segment: Setting Up Accounts (da=“Tutorial”) Setting up github and gitpod Fixing permissions (fixing-your-organization-permissions.md) 3.1.1 Text Companion: Setting Up Accounts (da=“HowTo”) "],["video-segment-starting-a-new-gitpod-project-datutorial.html", "3.2 Video Segment: Starting a New Gitpod Project (da=“Tutorial”)", " 3.2 Video Segment: Starting a New Gitpod Project (da=“Tutorial”) can use RPS HTML as example forking, workspace layout, bin/server, tab management could be chance to talk about file structures and terminal 3.2.1 Text Companion: Starting a New Gitpod Project (da=“HowTo”) "],["video-segment-rails-grade-and-git-committing-datutorial.html", "3.3 Video Segment: Rails Grade and Git Committing (da=“Tutorial”)", " 3.3 Video Segment: Rails Grade and Git Committing (da=“Tutorial”) kind of awkward placement, this video and text could go early in RPS HTML video manually checking work, rails grade, /git commiting rails-grade.md gitpod-snapshot.md 3.3.1 Text Companion: Rails Grade and Git Committing (da=“HowTo”) "],["terminology-technical-reference.html", "4 Terminology Technical Reference", " 4 Terminology Technical Reference "],["ruby-technical-reference.html", "5 Ruby Technical Reference", " 5 Ruby Technical Reference "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
