[["index.html", "AD1 Preface", " AD1 Ben + Raghu Preface This is the basic outline of a “Lesson” in the planned LMS app, including the syntax for LTI placement and quiz questions class Person attr_accessor :first_name, :last_name def full_name &quot;#{first_name} #{last_name}&quot; end end Bullets More bullets A paragraph. LTI{Launch the tool}(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(20)[foo]{400} Bullets More bullets LTI{ }(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(10)[bar] "],["choose-one.html", "Choose one", " Choose one First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option This is not correct because of xyz reason {: .choose_best #bin points=“30” answer=“3” } "],["choose-all-that-apply.html", "Choose all that apply", " Choose all that apply First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option That’s right! Because of xyz reason {: .choose_all #baz points=“30” answer=“[3, 4]” } "],["appdev-outline.html", "1 AppDev Outline", " 1 AppDev Outline This document is a chronological outline of the AppDev course content, based on the Canvas material for “BUSN 36110 81 (Summer 2022) Application Development”. "],["diátaxis.html", "1.1 Diátaxis", " 1.1 Diátaxis In an effort towards Diátaxis, the content is identified by small chunks of material and tags are used in the section headers. We should strive to keep these all separated. (da=“Tutorial”) pratical-study quadrant practical guided tutorials that produce meaningful results avoid abstraction, generalization, explanation, choices (da=“HowTo”) pratical-work quadrant similar to tutorial, but more concise with no digression or teaching (da=“Explain”) theoretical-study quadrant understanding-oriented discussions referring to big-picture topics include concepts, connections, abstraction, generalzation, alternatives, optional readings (da=“TechRef”) theoretical-work quadrant indexes, glossaries, dictionaries pure information, concise, no ambiguity, provide examples (da=“Exercise”) our own this is not part of the cannon, but we add it One could argue that “Exercises” are an offshoot of “Tutorials”. But I keep them separated for now. Note, the difference between “Tutorials” and “HowTo” here. Both describe a sequence of actions and are done hands-on. They are distinguished by the user needs: study (“Tutorial”) vs. work (“HowTo”). Tutorials provide a learning experience, how-to-guides help the user accomplish a task. For us, the line is blurry, but a breakdown could be that any gitpod and other videos are “Tutorials” and the written accompaniment is a “HowTo”. How-to-guides should never be videos, because a user should be able to quickly refer to what they need, without buffering or scrubbing. "],["technical-references-code-vs.-terminology.html", "1.2 Technical References: Code vs. Terminology", " 1.2 Technical References: Code vs. Terminology There are two types of technical references. One is for terms, the terminology reference, which can be related to specific programming languages, however, any examples of HTML tags, Ruby methods, etc. should go into the code reference. There is one code reference for each subject area: HTML+CSS, Ruby, etc. Both of these glossaries could be built up through the class, meaning the students would only see the most recent terms and those introduced previously. By the end, this is a long glossary sectioned by course units. These code references already exist: Ruby: Ruby Foundations Slides the-one-reference.md optional-syntaxes-in-ruby.rb HTML + CSS: HTML + CSS Recap Slides html-reference.md html-cheatsheet.md classbook.md "],["whats-missing.html", "1.3 What’s missing?", " 1.3 What’s missing? Running list of things TODO: The location(s) of the technical references (“TechRef”), and how they are built up Command-line basics could just be a short “Tutorial” video along with a “TechRef” of all the commands shown in the course place to explain directory structure and filepaths Dedicated video + text content of technical setup. Gitpod and github accounts, opening gitpod workspace, tab organization, /git commiting, rails grade, etc. Can be done with “RPS HTML” or “String” as example. See “Gitpod Technical Setup” topic in “Week 1” below. Dedicated video + text content of gems and Gemfile (and maybe bundle). This is found throughout content right now. CSS reference, there is some here: classbook.md Text doc with “keyboard magic” commands (e.g., TAB completion, opening/clearing terminal). Dedicated video + text for ideas.firstdraft.com with domain model for OfferUp. See Week 6\" topic “Domain Modeling” Video tutorial for https://association-accessors.firstdraft.com/. This is in the last 10 minutes of Day 7 recording right now. Maybe a dedicated chapter for belongs_to, has_many, scope, through, and use of .joins() for queries. Dedicated video + text content for starting from scratch, generator resources, and migration. This is spread across videos (e.g., Day 7 video, Day 8 short video, Photogram and MSM signin), chapters (e.g., active-record.md, draft-generators.md, draft-account.md), classroom examples (Day 8 recordings). See “Week 8” topic “Starting from Scratch with Generators” below. API videos for Mailgun, Twilio, etc. Print stylesheet applied to any lesson to make hard copies (pdf) Heroku alternative video / writeup "],["course-overview.html", "2 Course Overview", " 2 Course Overview (da=“Explain”) Bird’s Eye View Slides (https://slides.com/raghubetina/01-birds-eye-view?token=u4vg--N6) 01-09: Course intro 10-15: What does it mean to know how to code? 16-21: SaaS 22-26: URLs 27-33: Raghu’s journey 34-40: How learning SaaS has evolved 41-46: Ruby on Rails, Play the whole game 47-49: Teaching team 50-79: Record keeping (history, tables, databases, domain modeling, CRUD) 80-88: Must See Movies example relational database tables "],["gitpod-technical-setup.html", "3 Gitpod Technical Setup", " 3 Gitpod Technical Setup Most of this is in the RPS HTML video, but it could have dedicated content Some of this is also in “Assignment Week 3 (pre-class) Part 3: String” video Chapters: day-2-notes.md rails-grade.md fixing-your-organization-permissions.md gitpod-snapshot.md hard-reload.md "],["video-segment-setting-up-accounts-datutorial.html", "3.1 Video Segment: Setting Up Accounts (da=“Tutorial”)", " 3.1 Video Segment: Setting Up Accounts (da=“Tutorial”) Setting up github and gitpod Fixing permissions (fixing-your-organization-permissions.md) 3.1.1 Text Companion: Setting Up Accounts (da=“HowTo”) "],["video-segment-starting-a-new-gitpod-project-datutorial.html", "3.2 Video Segment: Starting a New Gitpod Project (da=“Tutorial”)", " 3.2 Video Segment: Starting a New Gitpod Project (da=“Tutorial”) can use RPS HTML as example forking, workspace layout, bin/server, tab management could be chance to talk about file structures and terminal 3.2.1 Text Companion: Starting a New Gitpod Project (da=“HowTo”) "],["video-segment-rails-grade-and-git-committing-datutorial.html", "3.3 Video Segment: Rails Grade and Git Committing (da=“Tutorial”)", " 3.3 Video Segment: Rails Grade and Git Committing (da=“Tutorial”) kind of awkward placement, this video and text could go early in RPS HTML video manually checking work, rails grade, /git commiting rails-grade.md gitpod-snapshot.md 3.3.1 Text Companion: Rails Grade and Git Committing (da=“HowTo”) "],["rock-paper-scissors-html.html", "4 Rock, Paper, Scissors HTML", " 4 Rock, Paper, Scissors HTML This content has not been transcribed and may change Technical setup is contained in this video for now Chapters: day-2-notes.md rails-grade.md fixing-your-organization-permissions.md gitpod-snapshot.md html-reference.md html-cheatsheet.md classbook.md Project: https://github.com/appdev-projects/rps-html 4.0.1 Video Segment: Nth bite-size chunk of RPS HTML (da=“Tutorial”) The pattern repeats 4.0.1.1 Text Companion: Nth bite-size chunk of RPS HTML (da=“HowTo”) 4.0.2 Finish and Submit RPS HTML (da=“Exercise”) Demo gitpod-snapshot.md "],["deploying-to-heroku.html", "5 Deploying to Heroku", " 5 Deploying to Heroku This content has not been transcribed and may change Chapters: deploying-to-heroku.md 5.0.1 Video Segment: Deploying to Heroku, Optional (da=“Tutorial”) dedicated video with signing up and how it works 5.0.1.1 Text Companion: Deploying to Heroku, Optional (da=“HowTo”) "],["rock-paper-scissors-css.html", "6 Rock, Paper, Scissors CSS", " 6 Rock, Paper, Scissors CSS This content has not been transcribed and may change Chapters: classbook.md Project: https://github.com/appdev-projects/rps-css 6.0.1 Video Segment: Nth bite-size chunk of RPS CSS (da=“Tutorial”) The pattern repeats 6.0.1.1 Text Companion: Nth bite-size chunk of RPS CSS (da=“HowTo”) 6.0.2 Finish and Submit RPS CSS (da=“Exercise”) "],["relationships.html", "7 Relationships", " 7 Relationships (da=“Explain”) Records and Relationships Slides (https://firstdraft.slides.com/raghubetina/records-and-relationships?token=hKsM-8iq) 01: Get to know each other 02: Types of associations 7.0.1 Practice Identifying Relationships (da=“Exercise”) Records and Relationships Slides (https://firstdraft.slides.com/raghubetina/records-and-relationships?token=hKsM-8iq) 03-25: Practice identifying relationship 26: ERD &amp; Ideas Slides (but this doesn’t actually come next) "],["html-recap.html", "8 HTML Recap", " 8 HTML Recap (da=“Explain”) this could all just be in the technical reference for HTML, with Replit exercises following the review Chapters: html-reference.md html-cheatsheet.md HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 01-05: HTML basics 8.0.1 HTML Replits (da=“Exercise”) HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 05-07: HTML Replits "],["css-recap.html", "9 CSS Recap", " 9 CSS Recap (da=“Explain”) this could all just be in the technical reference for CSS, with Replit exercises following the review Chapters: classbook.md HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 09-13: CSS Fundamentals 15: External style sheets 9.0.1 CSS Replits (da=“Exercise”) HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 14: CSS Fundamentals Replit 16: External style sheets Replit "],["style-sheets-recap.html", "10 Style Sheets Recap", " 10 Style Sheets Recap (da=“Explain”) HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 20-23, 25-26: Borrowing style sheets 28: Bootstrap 10.0.1 Style Sheets Replits (da=“Exercise”) HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 24: Google Fonts Replit 27: Font Awesome Replit "],["design.html", "11 Design", " 11 Design (da=“Explain”) HTML and CSS Recap Slides (https://firstdraft.slides.com/raghubetina/html-and-css-recap?token=8gU8ghvw) 29: Readings 31-34: Basic rules (mixed in with some Replits) Chapters: design-resources.md Optional readings: Typography: http://practicaltypography.com/typography-in-ten-minutes.html Seven Rules Part 1: https://learnui.design/blog/7-rules-for-creating-gorgeous-ui-part-1.html Part 2: https://learnui.design/blog/7-rules-for-creating-gorgeous-ui-part-2.html "],["linkinbio.html", "12 Linkinbio", " 12 Linkinbio (da=“Tutorial”, da=“HowTo”, da=“Exercise”) Chapters: - linkinbio.md Project: https://github.com/appdev-projects/linkinbio 12.0.1 Finish and Submit Linkinbio (da=“Exercise”) "],["intro-to-ruby.html", "13 Intro to Ruby", " 13 Intro to Ruby These are all the pre-class Ruby homework assignments Chapters: the-one-reference.md 13.0.1 Nouns, Verbs, and Grammar (da=“Explain”, da=“Exercise”) noun-verbs-and-grammar.md “Exercises” in Replits 13.0.2 Program Notes (da=“Explain”) program-notes.md 13.0.3 String (da=“Explain”, da=“Exercise”) string.md “Exercises” in Replits 13.0.4 Video Segment: Setting up String Gitpod (da=“Tutorial”) not yet transcribed This video + text overlaps with “Week 1 Technical Setup” material Chance to review technical setup (from forking on gitpod to rails grade) 13.0.4.1 Text Companion: Setting up String Gitpod (da=“HowTo”) 13.0.5 String Gitpod Exercise (da=“Exercise”) Project: https://github.com/appdev-projects/string-chapter 13.0.6 Integer (da=“Explain”, da=“Exercise”) integer.md “Exercises” in Replits 13.0.7 Integer Gitpod Exercise (da=“Exercise”) Project: https://github.com/appdev-projects/integer-chapter 13.0.8 Float (da=“Explain”, da=“Exercise”) float.md “Exercises” in Replits more-on-floats.md (not used here, but related) 13.0.9 Float Gitpod Exercise (da=“Exercise”) Project: https://github.com/appdev-projects/float-chapter 13.0.10 Other Ruby (da=“Explain”, da=“Exercise”) Previous pattern repeats Chapters (Projects): date.md (https://github.com/appdev-projects/date-chapter) array.md (https://github.com/appdev-projects/array-chapter) conditionals.md (https://github.com/appdev-projects/if-statements-chapter) loops.md (https://github.com/appdev-projects/loops-chapter) each.md (https://github.com/appdev-projects/each-chapter) hash.md (https://github.com/appdev-projects/hash-chapter) our-own-classes.md (https://github.com/appdev-projects/our-own-classes-chapter) "],["more-ruby.html", "14 More Ruby", " 14 More Ruby (da=“Explain”) Ruby Foundations Slides (https://firstdraft.slides.com/raghubetina/05-ruby-foundations?token=SFyjvCyP) 01-06: Basic recap 07-08: Inventors, google-fu Chapters: - the-one-reference.md 14.0.1 Ruby Gym (da=“Exercise”) https://checkins.firstdraft.com/exercises/113/student 14.0.2 Optional Ruby Practice (da=“Exercise”) See Canvas, links to Treehouse (https://teamtreehouse.com/library/ruby-basics-2) and CodeCademy (https://www.codecademy.com/learn/learn-ruby) "],["rock-paper-scissors-rcav.html", "15 Rock, Paper, Scissors RCAV", " 15 Rock, Paper, Scissors RCAV Transcription adding-routes-RPS-RCAV.md contains time-stamped sections matching the headings here Chapters (and slides): adding-routes.md rcav-flowchart.md Routing - RCAV Slides: https://firstdraft.slides.com/raghubetina/06-routing-rcav?token=43w7FD8Q Project: https://github.com/appdev-projects/rps-rcav Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 15.0.1 Video Segment: Dynamic Web Applications and URLs (da=“Explain”) request lifecycle of Route, Controller, Action, View web interface and URLs actions render and redirect 15.0.1.1 Text Companion: Dynamic Web Applications and URLs (da=“Explain”) 15.0.2 Video Segment: Route (da=“Explain”) all about routing and config/routes.rb get() 15.0.2.1 Text Companion: Route (da=“Explain”) 15.0.3 Video Segment: Controller, Action, View (da=“Explain”) all about app/controllers/ ApplicationController inheritance 15.0.3.1 Text Companion: Controller, Action, View (da=“Explain”) 15.0.4 Video Segment: Dropping self. (da=“Explain”) why we drop self. 15.0.4.1 Text Companion: Dropping .self (da=“Explain”) 15.0.5 Video Segment: Our First RCAV (da=“Tutorial”) debugging an RCAV for /rock RTEM ends with redirect_to 15.0.5.1 Text Companion: Our First RCAV (da=“HowTo”) 15.0.6 Video Segment: Render HTML (da=“Tutorial”) from render({ :plain =&gt; \"Hello, world!\" }) to render({ :template =&gt; \"game_templates/user_rock.html.erb\" }) .html vs. .html.erb app/views/ view templates rather than public/ 15.0.6.1 Text Companion: Render HTML (da=“HowTo”) 15.0.7 Video Segment: Embedded Ruby Tags (da=“Tutorial”) all about &lt;% %&gt; and &lt;%= %&gt; in a view template 15.0.7.1 Text Companion: Embedded Ruby Tags (da=“HowTo”) 15.0.8 Video Segment: Control Flow with Embedded Ruby (da=“Tutorial”) conditionals all about &lt;% if ... %&gt; 15.0.8.1 Text Companion: Control Flow with Embedded Ruby (da=“HowTo”) 15.0.9 Video Segment: Homepage (da=“Tutorial”) RCAV with render for / 15.0.9.1 Text Companion: Homepage (da=“HowTo”) 15.0.10 Video Segment: Reinforce RCAV with /paper (da=“Tutorial”) RCAV with render for /paper 15.0.10.1 Text Companion: Reinforce RCAV with /paper (da=“HowTo”) 15.0.11 Video Segment: Embedded Ruby in the Controller with Instance Variables (da=“Tutorial”) moving conditional control flow &lt;% if ... %&gt; from /rock into the ApplicationController action play_rock local variables vs. instance variables with @-notation 15.0.11.1 Text Companion: Embedded Ruby in the Controller with Instance Variables (da=“HowTo”) 15.0.12 Video Segment: Linking Pages with Layouts (da=“Tutorial”) all about app/views/layouts/wrapper.html.erb to get some headers, footers, and navigation links layout(\"wrapper.html.erb\") in ApplicationController :layout argument for render() 15.0.12.1 Text Companion: Linking Pages with Layouts (da=“HowTo”) 15.0.13 Finish and Submit RPS RCAV (da=“Exercise”) 15.0.14 RCAV Addendums Stuff that I did not zip in from the chapter adding-routes.md: Addendum: Rendering JSON Addendum: Custom Controller Files "],["omnicalc-1.html", "16 Omnicalc 1", " 16 Omnicalc 1 (Forms and Query Strings) Transcription forms-query-strings-and-params-Omnicalc-Part1.md contains time-stamped sections matching the headings here Chapters (and slides): forms-query-strings-and-params.md Project: https://github.com/appdev-projects/omnicalc-1 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 16.0.1 Video Segment: Exploring the Target (da=“Explain”) we want forms to get information what is a query string 16.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 16.0.2 Video Segment: /square/new RCAV (da=“Tutorial”) RCAV with RTEM for /square/new debugging 16.0.2.1 Text Companion: /square/new RCAV (da=“HowTo”) 16.0.3 Video Segment: /square/new Form (da=“Tutorial”) building a form in the /square/new view template &lt;form&gt;&lt;/form&gt;, &lt;label&gt;&lt;/label&gt;, &lt;input&gt;, &lt;button&gt;&lt;/button&gt; valid forms with for=\"\" and id=\"\" 16.0.3.1 Text Companion: /square/new Form (da=“HowTo”) 16.0.4 Video Segment: Query String and Parameters Hash (da=“Tutorial”) everything after ? from /square/new form and the Parameters Hash 16.0.4.1 Text Companion: Query String and Parameters (da=“HowTo”) 16.0.5 Video Segment: /square/results RCAV (da=“Tutorial”) building the /square/results RCAV and form more on query strings 16.0.5.1 Text Companion: /square/results RCAV (da=“HowTo”) 16.0.6 Video Segment: Form Action and params (da=“Tutorial”) adding action=\"/square/results\" to the /square/new form using params Hash in the /square/results action to fetch from query string, calculate, and display 16.0.6.1 Text Companion: Form Action and params (da=“HowTo”) 16.0.7 Video Segment: Independence of Routes (da=“Tutorial”) use /random/results RCAV developed before /random/new to highlight independence of routes 16.0.7.1 Text Companion: Independence of Routes (da=“HowTo”) 16.0.8 Finish and Submit Omnicalc 1 (da=“Exercise”) see forms-query-strings-and-params-Omnicalc-Part1.md “Notes from the README” section for additional stuff that could go here "],["fortune-teller.html", "17 Fortune Teller", " 17 Fortune Teller Transcription fortune-teller.md contains time-stamped sections matching the headings here Chapters (and slides): README text at bottom of fortune-teller.md adding-routes.md rcav-flowchart.md Routing – RCAV Slides: https://firstdraft.slides.com/raghubetina/06-routing-rcav?token=43w7FD8Q Project: https://github.com/appdev-projects/fortune-teller Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 17.0.1 Video Segment: Routes and Controllers in Fortune Teller (da=“Tutorial”) practice routing stepping away from app/controllers/application_controller.rb, and using app/controllers/numbers_controller.rb inheritance: NumbersController &lt; ApplicationController &lt; ActionController::Base 17.0.1.1 Text Companion: Routes and Controllers in Fortune Teller (da=“HowTo”) 17.0.2 Video Segment: .each Loop on @ Instance Variable (da=“Tutorial”) from @zebra instance variable array to .each loop in the view template for /lottery/lucky embedded Ruby tags &lt;%= %&gt; vs. &lt;% %&gt; 17.0.2.1 Text Companion: winners Action (da=“HowTo”) 17.0.3 Video Segment: RCAV /lottery/unlucky (da=“Tutorial”) RCAV practice. re-do the /lottery/lucky but with different copy. try to type everything, avoid copy-paste 17.0.3.1 Text Companion: RCAV /lottery/unlucky (da=“HowTo”) 17.0.4 Video Segment: Navbar and Zodiac Debugging (da=“Tutorial”) aside to app/views/layouts/application.html.erb to show debug /zodiacs/aries together RTEM 17.0.4.1 Text Companion: Navbar and Zodiac Debugging (da=“HowTo”) 17.0.5 Finish and Submit Fortune Teller (da=“Exercise”) see README text at bottom of fortune-teller.md for additional stuff “Debugging checklist” that could go here "],["omnicalc-2.html", "18 Omnicalc 2", " 18 Omnicalc 2 (Forms, Params, APIs) Transcription Omicalc-Part2.md contains time-stamped sections matching the headings here Chapters (and slides): forms-query-strings-and-params.md omnicalc-api.md meteorologist-intro-to-apis.md storing-credentials-securely.md google-translate.md sending-emails-and-texts.md Right now a bunch of this found much later in the Day 5 material on Canvas. See my notes below, APIs might need devoted video (maybe one for each API). Project: https://github.com/appdev-projects/omnicalc-2 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 18.0.1 Video Segment: Exploring the Target (da=“Explain”) doing math, intro to APIs Street to Coordinates Translate with SMS 18.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 18.0.2 Video Segment: Reviewing Query Strings (da=“Tutorial”) examine target /wizard_add and implement using query string and params 18.0.2.1 Text Companion: Reviewing Query Strings (da=“HowTo”) 18.0.3 Video Segment: Reviewing Forms (da=“Tutorial”) examine target /add and implement using forms 18.0.3.1 Text Companion: Reviewing Forms (da=“HowTo”) 18.0.4 Video Segment: Intro to APIs with Street to Coordinates (da=“Tutorial”) there is a bunch of explanation here about APIs implementing /experiment for “Street to Coordinates” API keys JSON Google Maps API JSON to Hash with JSON.parse(open(@url).read) 18.0.4.1 Text Companion: Intro to APIs with Street to Coordinates (da=“HowTo”) 18.0.5 Finish and Submit Omnicalc 2 (da=“Exercise”) see README text at bottom of Omicalc-Part2.md for additional stuff that could go here API stretch goal should maybe go in a separate place? "],["refactoring-fortune-teller-with-dynamic-routes.html", "19 Refactoring Fortune Teller with Dynamic Routes", " 19 Refactoring Fortune Teller with Dynamic Routes There is no video yet, everything is in the chapter refactoring-fortune-teller-with-dynamic-routes.md Chapters (and slides): refactoring-fortune-teller-with-dynamic-routes.md README text at bottom of fortune-teller.md rcav-flowchart.md Project: https://github.com/appdev-projects/refactoring-fortune-teller Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 19.0.1 Video Segment: Part 1: Dice (da=“Tutorial”) dynamic route segments see refactoring-fortune-teller-with-dynamic-routes.md chapter section get(\"/roll/:number_of_dice/:how_many_sides\", { :controller =&gt; \"dice\", :action =&gt; \"infinity_and_beyond\" }) params.fetch(\"number_of_dice\") and params.fetch(\"how_many_sides\") 19.0.1.1 Text Companion: Part 1: Dice (da=“HowTo”) 19.0.2 Video Segment: Part 2: Horoscopes (da=“Tutorial”) dynamic route segments, our own classes see refactoring-fortune-teller-with-dynamic-routes.md chapter section Zodiac class in app/models/ get(\"/zodiacs/:the_sign\", { :controller =&gt; \"fortunes\", :action =&gt; \"horoscopes\" }) String#to_sym regressions and refactoring, importance of automated tests 19.0.2.1 Text Companion: Part 2: Horoscopes (da=“HowTo”) 19.0.3 Finish and Submit Refactoring Fortune Teller (da=“Exercise”) optional extra challenge, refactor RPS RCAV with dynamic routes "],["classroom-domain-modeling.html", "20 Classroom Domain Modeling", " 20 Classroom Domain Modeling (da=“Explain”) this was largely a classroom exercise and is partially written up in day-5-domain-modeling.md ERD and Ideas Slides (https://firstdraft.slides.com/raghubetina/erd-and-ideas?token=B9Lja2V8) 01-09: review MSM tables 10-11: Yap model 12-15: Photogram model 16-17: Very Best model 18: entity relationship diagrams (https://www.lucidchart.com/pages/er-diagrams#section_0) 19-23: model Booth Ride Share, MyFitness, Chew, Mock Interviewer "],["rubber-duck-debugging.html", "21 Rubber Duck Debugging", " 21 Rubber Duck Debugging (da=“Explain”) just a reading: https://www.thoughtfulcode.com/rubber-duck-debugging-psychology/ "],["omnicalc-debug.html", "22 Omnicalc Debug", " 22 Omnicalc Debug Optional Practice (da=“Exercise”) Un-graded assignment, but there are tests built in Chapters (and slides): refactoring-fortune-teller-with-dynamic-routes.md README text at https://github.com/appdev-projects/omnicalc-debug#readme Project: https://github.com/appdev-projects/omnicalc-debug "],["apis-demo.html", "23 APIs Demo", " 23 APIs Demo Google Translate and SMS with Twilio, Optional (da=“Tutorial”, da=“Explain”) No video Chapters (and slides): google-translate.md sending-emails-and-texts.md storing-credentials-securely.md Project: Start: https://github.com/appdev-targets/omnicalc-2-api-starting-point Solution: https://github.com/appdev-targets/omnicalc-2-api-starting-point/tree/translate-solution "],["msm-queries.html", "24 MSM Queries", " 24 MSM Queries (Intro to Databases) Transcription MSM-queries.md contains time-stamped sections matching the headings here Chapters (and slides): active-record.md our-own-classes.md “additional query tasks” from the README at the bottom of MSM-queries.md Project: https://github.com/appdev-projects/msm-queries Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 24.0.1 Video Segment: Recordkeeping Review, Exploring the Target (da=“Explain”) showing Bird’s Eye View Slides 72-73 database backed web appplication explore /directors/youngest and /directors/eldest explore index (tables) and show (details) pages 24.0.1.1 Text Companion: Recordkeeping Review, Exploring the Target (da=“Explain”) 24.0.2 Video Segment: Exploring /rails/db (da=“Explain”) clicking around in /rails/db looking at tables development database SQLite 24.0.2.1 Text Companion: Exploring /rails/db (da=“Explain”) 24.0.3 Video Segment: SQL and ActiveRecord Intro (da=“Explain”, da=“Tutorial”) adding a record with SQL command in directors table at /rails/db/sql in the SQL Editor Ruby to performant SQL with ActiveRecord object relational mapper database transactions 24.0.3.1 Text Companion: SQL and ActiveRecord Intro (da=“Explain”, da=“HowTo”) 24.0.4 Video Segment: Creating app/models/ Classes (da=“Explain”) just showing off app/models/ files for the four tables that we would like to have not actually creating these yet review our-own-classes.md inheritance from ApplicationRecord 24.0.4.1 Text Companion: Creating app/models/ Classes (da=“Explain”) 24.0.5 Video Segment: RCAV /directors and Director Class (da=“Tutorial”) wire up /directors with RCAV database naming conventions: get(\"/directors\", { :controller =&gt; \"directors\", :action =&gt; \"index\" }), app/models/director.rb, Director class, directors table inheritence in model: Director &lt; ApplicationRecord &lt; ActiveRecord::Base .each to list database info from the one record we added manually via SQL on inherited .all method to Director create app/models/: movies.rb, actors.rb, and characters.rb 24.0.5.1 Text Companion: RCAV /directors and Director Class (da=“HowTo”) 24.0.6 Video Segment: Rails Console (da=“Tutorial”) explore Director in rails console state of terminal (pry(main)&gt; vs $) rails console quirks: pagination, quiting view, exiting 24.0.6.1 Text Companion: Rails Console (da=“HowTo”) 24.0.7 Video Segment: Reading and Creating Records (da=“Tutorial”) explore Director in rails console R and C in CRUD reading records with Director.all.at(0) creating records with .new and .save 24.0.7.1 Text Companion: Reading and Creating Records (da=“HowTo”) 24.0.8 Video Segment: sample_data (da=“Tutorial”) test data without .save rails sample_data rake task in tasks/dev.rake view /rails/db 24.0.8.1 Text Companion: sample_data (da=“HowTo”) 24.0.9 Video Segment: Finishing /directors index (da=“Tutorial”) moving Director.all from view template to controller .each to loop over @list_of_directors object, ActiveRecord::Relation formatting results into a table images with robohash (still necessary? works now…) linking to details page with flexible route and primary key, href=\"/director/&lt;%= a_director.id %&gt;\" 24.0.9.1 Text Companion: Finishing /directors Index (da=“HowTo”) 24.0.10 Video Segment: Database Query with .where (da=“Tutorial”) RCAV /directors/eldest query DB in rails console, building up to Director.where.not({ :dob =&gt; nil }).order({ :dob =&gt; :asc }).first put query into wisest action, and put @oldest director into view template app/views/director_templates/eldest.html.erb http://strftime.net/ to get .dob formatted 24.0.10.1 Text Companion: Database Query with .where (da=“HowTo”) 24.0.11 Video Segment: Flexible Routes for Director Details (da=“Tutorial”) should title be “flexible” or “dynamic”? return to unfinished “Show details” links on index page importance of placement of static /director/eldest vs. flexible /director/:an_id in config/routes.rb fetch director ID from params and query DB first in rails console aside: using tp Movie.where({ :year =&gt; 1994 }), \"title\", \"year\", \"id\" in rails console to explore table place finished query in the action director_details and the director info in the view template time_ago_in_words() 24.0.11.1 Text Companion: Flexible Routes for Director Details (da=“HowTo”) 24.0.12 Video Segment: Filmography (da=“Tutorial”) foreign keys for director_id in Movie rails console to show tp Movie.where({ :director_id =&gt; 1 }), \"title\", \"year\", \"id\" add query to director_details format filmography table in view template app/views/director_templates/show.html.erb, including the query: &lt;%= Director.where({ :id =&gt; a_film.director_id }).at(0).name %&gt; 24.0.12.1 Text Companion: Filmography (da=“HowTo”) 24.0.13 Finish and Submit MSM Queries (da=“Exercise”) "],["classroom-queries-debug.html", "25 Classroom Queries Debug", " 25 Classroom Queries Debug (da=“Exercise”) Chapters (and slides): README at https://github.com/appdev-projects/classroom-queries-debug#readme Project: https://github.com/appdev-projects/classroom-queries-debug "],["different-ruby-styles.html", "26 Different Ruby Styles", " 26 Different Ruby Styles (da=“Explain”) just read optional-syntaxes-in-ruby.md "],["history-of-ml.html", "27 History of ML", " 27 History of ML Optional Reading (da=“Explain”) many links, could be compressed, see Canvas "],["refactoring-msm-queries.html", "28 Refactoring MSM Queries", " 28 Refactoring MSM Queries Transcription refactoring-MSM-queries.md contains time-stamped sections matching the headings here Chapters (and slides): refactoring-msm-queries-with-methods.md Project: https://github.com/appdev-projects/refactoring-msm-queries-1 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 28.0.1 Video Segment: Exploring the Target, What is Refactoring? (da=“Explain”) explore target, which is a solution to MSM Queries () technical debt, refactoring automated tests with rails grade 28.0.1.1 Text Companion: Exploring the Target, What is Refactoring? (da=“Explain”) 28.0.2 Video Segment: Actor Details show Page (da=“Explain”) examine view template and show action in app/controllers/actors_controller.rb reiterate ActiveRecord::Relation 28.0.2.1 Text Companion: Actor Details show Page (da=“Explain”) 28.0.3 Video Segment: ActiveRecord::Relation Review (da=“Explain”) rails console to explore ActiveRecord objects 28.0.3.1 Text Companion: ActiveRecord::Relation Review (da=“Explain”) 28.0.4 Video Segment: Actor Details Filmography (da=“Explain”) ActiveRecord::Relation objects in app/views/actor_templates/show.html.erb to query from Actor to Character, Character to Movie, and Movie to Director on 28.0.4.1 Text Companion: Actor Details Filmography (da=“Explain”) 28.0.5 Video Segment: Defining Instance Methods in the Model (da=“Tutorial”) define title_with_year in app/models/movie.rb see refactoring-msm-queries-with-methods.md section “Instance method review” use of self. in model method apply new method to app/views/movie_templates/show.html.erb 28.0.5.1 Text Companion: Defining Instance Methods in the Model (da=“HowTo”) 28.0.6 Video Segment: Movie#director (da=“Tutorial”) define director in app/models/movie.rb to get rid of query in view templates and replace with @the_movie.director apply new method to app/views/movie_templates/show.html.erb 1-N association 28.0.6.1 Text Companion: Movie#director (da=“HowTo”) 28.0.7 Video Segment: Director#filmography (da=“Tutorial”) other side of 1-N association define filmography in app/models/director.rb to get rid of query in view templates and replace with @the_director.filmography apply new method to app/views/director_templates/show.html.erb 28.0.7.1 Text Companion: Director#filmography (da=“HowTo”) 28.0.8 Additional Association Accessor Methods (da=“Exercise”) work independently to define additional 1-N associations: # Director#filmography (we did this!) # Movie#director (and this!) # Movie#characters # Character#movie # Actor#characters # Character#actor 28.0.9 Video Segment: Additional Association Accessor Methods Solved (da=“Tutorial”) finish 1-N association accessor methods in the models 28.0.9.1 Text Companion: Additional Association Accessor Methods Solved (da=“HowTo”) 28.0.10 Video Segment: Applying Association Accessor Methods (da=“Tutorial”) replace all DB queries with 1-N association accessor methods in the view templates 28.0.10.1 Text Companion: Applying Association Accessor Methods (da=“HowTo”) 28.0.11 Finish and Submit Refactoring MSM Queries (da=“Exercise”) "],["domain-modeling.html", "29 Domain Modeling", " 29 Domain Modeling (da=“Exercise”, da=“Explain”) see day-6-recording.md for Canvas links domain model OfferUp solution is here: https://canvas.uchicago.edu/courses/41147/assignments/465866 29.0.1 Video Segment: Ideas Tutorial (da=“Tutorial”) content does not exist dedicated tutorial for ideas.firstdraft.com with domain model for OfferUp 29.0.1.1 Text Companion: Ideas Tutorial (da=“HowTo”) can be pulled from https://canvas.uchicago.edu/courses/41147/pages/firstdraft-ideas-erd-tool "],["photogram-gui.html", "30 Photogram GUI", " 30 Photogram GUI Transcription photogram-gui.md contains time-stamped sections matching the headings here Chapters (and slides): active-record.md CRUD section (https://chapters.firstdraft.com/chapters/770#time-to-crud) Project: https://github.com/appdev-projects/photogram-gui Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 30.0.1 Video Segment: CRUD with Forms (da=“Explain”) CRUD in relation to MSM app forms for getting data into query string and then into database 30.0.1.1 Text Companion: CRUD with Forms (da=“Explain”) 30.0.2 Video Segment: Explore the Target (da=“Explain”) CRUD in relation to Photogram GUI 30.0.2.1 Text Companion: Explore the Target (da=“Explain”) 30.0.3 Video Segment: Explore the ERD (da=“Explain”) examine /rails/db, run rails sample_data examine ERD (https://github.com/appdev-projects/photogram-gui/blob/master/erd.png) discuss 1-N and N-N relationships in the domain 30.0.3.1 Text Companion: Explore the ERD (da=“Explain”) 30.0.4 Video Segment: Explore Model Classes (da=“Explain”) examine app/models/user.rb association accessor instance methods there and in other models validates (first mention, only detailed later in https://github.com/appdev-projects/msm-validations and data-integrity-with-validations.md) 30.0.4.1 Text Companion: Explore Model Classes (da=“Explain”) 30.0.5 Video Segment: Users index (da=“Tutorial”) RCAV to get table of users at /users query in index action to get ActiveRecord::Relation object @list_of_users 30.0.5.1 Text Companion: Users index (da=“HowTo”) 30.0.6 Video Segment: User Details show (da=“Tutorial”) more on validates (probably should be moved from here) RCAV a details page with flexible / dynamic routes, using /users/:path_username redirect_to if nil user, otherwise render({ :template =&gt; \"user_templates/show.html.erb\" }) “Own photos” table with association accessor methods @the_user.own_photos and a_photo.poster.username Faker gem 30.0.6.1 Text Companion: User Details show (da=“HowTo”) 30.0.7 Video Segment: Adding Navigation Links (da=“Tutorial”) add navbar links to the app/views/layouts/application.html.erb 30.0.7.1 Text Companion: Adding Navigation Links (da=“HowTo”) 30.0.8 Video Segment: Users Show Details Link (da=“Tutorial”) add show details link on /users table with href=\"/users/&lt;%= a_user.username %&gt;\" 30.0.8.1 Text Companion: Users Show Details Link (da=“HowTo”) 30.0.9 Video Segment: Photos index (da=“Tutorial”) RCAV /photos and get list of photos in index action for table in view template include show details link with href=\"/photos/&lt;%= a_photo.id %&gt;\" 30.0.9.1 Text Companion: Photos index (da=“HowTo”) 30.0.10 Video Segment: Photo Details show (da=“Tutorial”) RCAV /photos/:path_id flexible route use photo ID from URL in params in show action to get photo details and display 30.0.10.1 Text Companion: Photo Details Page (da=“HowTo”) 30.0.11 Video Segment: Photo Comments with Association Accessors (da=“Tutorial”) get “Comments” section on photo details page using @the_photo.comments.each and a_comment.commenter association accessor methods 30.0.11.1 Text Companion: Photo Comments with Association Accessors (da=“HowTo”) 30.0.12 Video Segment: Delete Photo Link (da=“Tutorial”) moving to the D in CRUD get “Delete this photo” link on photo details page by RCAVing \"/delete_photo/&lt;%= @the_photo.id %&gt;\" .destroy in the action to delete photo 30.0.12.1 Text Companion: Delete Photo Link (da=“HowTo”) 30.0.13 Video Segment: Create Photo Form (da=“Tutorial”) moving to the C in CRUD build up form in app/views/photo_templates/index.html.erb RCAV action=\"/insert_photo\" with action create fetch params from form, .save to database 30.0.13.1 Text Companion: Create Photo Form (da=“HowTo”) 30.0.14 Video Segment: Update Photo Form (da=“Tutorial”) moving to the U in CRUD build up form in app/views/photo_templates/show.html.erb RCAV action=\"/update_photo/&lt;%= @the_photo.id %&gt;\" with action update fetch params from path, .save to database 30.0.14.1 Text Companion: Update Photo Form (da=“HowTo”) 30.0.15 Finish and Submit Photogram GUI (da=“Exercise”) "],["msm-validations.html", "31 MSM Validations", " 31 MSM Validations Optional Exercise (da=“Exercise”) Un-graded assignment, but there are tests built in Chapters (and slides): ata-integrity-with-validations.md README text at https://github.com/appdev-projects/msm-validations#readme Project: https://github.com/appdev-projects/msm-validations "],["very-best-debug.html", "32 Very Best Debug", " 32 Very Best Debug Transcription very-best-debug-video.md contains time-stamped sections matching the headings here Chapters (and slides): Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 32.0.1 Video Segment: Homepage Debugging (da=“Tutorial”) RTEM to slowly debug / better_errors page console aside (da=“Explain”) 32.0.1.1 Text Companion: Homepage Debugging (da=“HowTo”) 32.0.2 Video Segment: Typos and NilClass Bug (da=“Tutorial”) RTEM to slowly debug /venues/[ID of venue] tricky bug: undefined method 'address' for nil:NilClass ActiveRecord::Relation single instance .at(0) 32.0.2.1 Text Companion: Typos and NilClass Bug (da=“HowTo”) 32.0.3 Video Segment: Association Accessor self.id Bug (da=“Tutorial”) RTEM to continue debugging /venues/[ID of venue] tricky bug: self.id in Comment#commenter, rather than self.author_id 32.0.3.1 Text Companion: Association Accessor self.id Bug (da=“HowTo”) 32.0.4 Finish and Submit Very Best Debug (da=“Exercise”) see list from README: https://github.com/appdev-projects/very-best-debug#readme "],["draft-resource-generator.html", "33 draft resource generator", " 33 draft resource generator (da=“Explain”) just a reading in draft-generators.md "],["refactoring-msm-again.html", "34 Refactoring MSM Again", " 34 Refactoring MSM Again Transcription refactoring-MSM-queries-again.md contains time-stamped sections matching the headings here Chapters (and slides): helper app: https://association-accessors.firstdraft.com/ Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 34.0.1 Video Segment: belongs_to (da=“Tutorial”, da=\"Explain) refactor 1-N Character#movie, going from the “many” to the “one” why belongs_to is better than previous method definitions aside into .joins at the rails console 34.0.1.1 Text Companion: belongs_to (da=“HowTo”) 34.0.2 Video Segment: has_many (da=“Tutorial”) refactor 1-N Movie#characters, going from the “one” to the “many” aside into method syntax for Director#filmography 34.0.2.1 Text Companion: has_many (da=“HowTo”) 34.0.3 Finish and Submit Refactoring MSM – Again! (da=“Exercise”) using https://association-accessors.firstdraft.com/ (needs a video tutorial) "],["photogram-associations.html", "35 Photogram Associations", " 35 Photogram Associations Optional Exercise (da=“Exercise”) Un-graded assignment, no tests, no rails grade has_many, belongs_to, scope, through Chapters (and slides): using https://association-accessors.firstdraft.com/ (needs a video tutorial) two readings: https://guides.rubyonrails.org/association_basics.html stretch goal: https://remimercier.com/scoped-active-record-associations/ Project: https://github.com/appdev-projects/photogram-associations "],["cookies-intro.html", "36 Cookies Intro", " 36 Cookies Intro Transcription cookies-with-video.md contains time-stamped sections matching the headings here Chapters (and slides): cookies.md Project: https://github.com/appdev-projects/cookies-intro Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 36.0.1 Video Segment: Exploring Browser Cookies (da=“Explain”) in Chrome, visit target, “Inspect” &gt; “Application” &gt; “Cookies”, Name/Value pairs 36.0.1.1 Text Companion: Exploring Browser Cookies (da=“Explain”) 36.0.2 Video Segment: cookies Object (da=“Tutorial”) explore &lt;%= cookies %&gt; on app/views/calculation_templates/addition_form.html.erb cookies.store() in add action and show in view template 36.0.2.1 Text Companion: cookies Object (da=“HowTo”) 36.0.3 Finish and Submit Cookies Intro (da=“Exercise”) see cookies.md for requirements "],["photogram-signin.html", "37 Photogram Signin", " 37 Photogram Signin (Intro to Authentication) Transcription photogram-signin.md contains time-stamped sections matching the headings here Chapters (and slides): cookies-vs-session.md Project: https://github.com/appdev-projects/photogram-signin Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 37.0.1 Video Segment: Storing Passwords (da=“Tutorial”) migration file: rails g migration AddPasswordDigestToUsers add password_digest Column to User explore db/migrate and rails db:migrate add has_secure_password to app/models/user.rb to get .password and .password_confirmation bcrypt gem 37.0.1.1 Text Companion: Storing Passwords (da=“HowTo”) 37.0.2 Video Segment: Signup Form (da=“Tutorial”) add navigation links in app/views/layouts/application.html.erb RCAV /user_sign_up copy and modify add user form found in app/views/users/index.html.erb use type=\"password\" inputs fix create action to use .password and .password_confirmation before .save control flow with :notice or :alert 37.0.2.1 Text Companion: Signup Form (da=“HowTo”) 37.0.3 Video Segment: Notices and Alerts (da=“Tutorial”) add notice and alert to app/views/layouts/application.html.erb use if ... present? control flow and style green and red 37.0.3.1 Text Companion: Notices and Alerts (da=“HowTo”) 37.0.4 Video Segment: Signout with reset_session (da=“Tutorial”) add session.store(:user_id, user.id) to create action RCAV /user_sign_out with reset_session in toast_cookies action 37.0.4.1 Text Companion: Signout with reset_session (da=“HowTo”) 37.0.5 Video Segment: Signin with post and authenticate (da=“Tutorial”) RCAV /user_sign_in with new_session_form action signin form with action=\"/verify_credentials\" and method=\"post\" authenticate action using user.authenticate and control flow 37.0.5.1 Text Companion: Signin with post and authenticate (da=“HowTo”) 37.0.6 Video Segment: Remove User-Facing IDs (da=“Tutorial”) put photo.owner_id = session.fetch(:user_id) and comment.author_id = session.fetch(:user_id) in backend create actions of add photo and add comment forms 37.0.6.1 Text Companion: Remove User-Facing IDs (da=“HowTo”) 37.0.7 Finish and Submit Photogram Signin (da=“Exercise”) "],["starting-from-scratch-with-generators.html", "38 Starting from Scratch with Generators", " 38 Starting from Scratch with Generators Day 8 Short Video Recording, which is not transcribed, additional materials (see “Todo”: https://github.com/orgs/firstdraft/projects/11/views/1) Chapters (and slides): starting-a-rails-project-from-scratch.md active-record.md draft-generators.md draft-account.md ideas.firstdraft.com generators with co-pilot Some of these steps are also done in the MSM signin video at the beginning. This can be a review. 38.0.1 Video Segment: Starting from Scratch with Generators (da=“Tutorial”) 38.0.1.1 Text Companion: Starting from Scratch with Generators (da=“HowTo”) "],["msm-signin.html", "39 MSM Signin", " 39 MSM Signin Transcription MSM-signin.md contains time-stamped sections matching the headings here Chapters (and slides): draft-generators.md draft-account.md Project: https://github.com/appdev-projects/msm-signin Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 39.0.1 Video Segment: Exploring the Target (da=“Explain”) show off signin, out, up, and /bookmarks in the target 39.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 39.0.2 Video Segment: Creating movies with generate model (da=“Tutorial”) run rails generate model movie in our blank app explore file in db/migrate/ run rails db:migrate visit /rails/db 39.0.2.1 Text Companion: Creating movies with generate model (da=“HowTo”) 39.0.3 Video Segment: Creating movies with generate draft:resource (da=“Tutorial”) run rails db:rollback then rails generate draft:resource movie explore config/routes.rb to view CRUD routes explore app/controllers/movies_controller.rb to view CRUD actions explore generated view templates run rails db:migrate aside into schema.rb and migration versioning 39.0.3.1 Text Companion: Creating movies with generate draft:resource (da=“HowTo”) 39.0.4 Video Segment: generate draft:resource for Entire Database (da=“Tutorial”) run rails db:rollback then rails generate draft:resource and rails db:migrate for all tables in database 39.0.4.1 Text Companion: generate draft:resource for Entire Database (da=“HowTo”) 39.0.5 Video Segment: Association Accessor Methods (da=“Tutorial”) use belongs_to and has_many on the table models can use https://association-accessors.firstdraft.com 39.0.5.1 Text Companion: Association Accessor Methods (da=“HowTo”) 39.0.6 Video Segment: Nav Links and sample_data (da=“Tutorial”) add links to app/views/layouts/application.html.erb run sample_data point out loading data from a CSV and adding a sample_data rake task 39.0.6.1 Text Companion: Nav Links and sample_data (da=“HowTo”) 39.0.7 Video Segment: validates and Summarize Startup (da=“Tutorial”) add validates :title, :presence =&gt; true to app/models/movie.rb summarize starting from scratch steps 39.0.7.1 Text Companion: validates and Summarize Startup (da=“HowTo”) 39.0.8 Video Segment: generate draft:account (da=“Tutorial”) getting users table with draft:account explore new CRUD routes, models, and actions 39.0.8.1 Text Companion: generate draft:account (da=“HowTo”) 39.0.9 Video Segment: Conditional Links, Alerts, and Notices (da=“Tutorial”) control flow showing of links in app/views/layouts/application.html.erb using if session.fetch(:user_id) == nil explore :alert and :notice in app/controllers/movies_controller.rb add alerts and notices to application layout 39.0.9.1 Text Companion: Conditional Links, Alerts, and Notices (da=“HowTo”) 39.0.10 Video Segment: Bookmark (da=“Tutorial”) run rails generate draft:resource bookmark tailoring user experience by allowing them to add records to a join table create action=\"/insert_bookmark\" form in app/views/movies/show.html.erb use the provided CRUD action, changing parameter names to matchup 39.0.10.1 Text Companion: Bookmark (da=“HowTo”) 39.0.11 Video Segment: Un-Bookmark (da=“Tutorial”) add conditional flow to bookmark action with Bookmark.where({ :movie_id =&gt; @the_movie.id, :user_id =&gt; session.fetch(:user_id) }) add href=\"/delete_bookmark/&lt;%= the_bookmark.id %&gt;\" link 39.0.11.1 Text Companion: Un-Bookmark (da=“HowTo”) 39.0.12 Video Segment: Bookmark Index for Current User (da=“Tutorial”) conditional flow to application layout for showing bookmarks modify index action in app/controllers/bookmarks_controller.rb three primary uses of session.fetch(:user_id) cookie define association accessor methods in user, bookmark, and movie models 39.0.12.1 Text Companion: Bookmark Index for Current User (da=“HowTo”) 39.0.13 Video Segment: @current_user (da=“Tutorial”) add load_current_user action to app/controllers/bookmarks_controller.rb to get @current_user use before_action(:load_current_user) in app/controllers/application_controller.rb to get @current_user everywhere apply @current_user.bookmarks in bookmarks index action 39.0.13.1 Text Companion: @current_user (da=“HowTo”) 39.0.14 Video Segment: Bookmark Drop-Down Form (da=“Tutorial”) create a drop-down form on app/views/bookmarks/index.html.erb using &lt;select name=\"query_movie_id\"&gt; with &lt;option value=\"&lt;%= a_movie.id %&gt;\"&gt; hiding ID keys from user 39.0.14.1 Text Companion: Bookmark Drop-Down Form (da=“HowTo”) 39.0.15 Finish and Submit MSM Signin (da=“Exercise”) "],["bootstrap-intro-with-task-list.html", "40 Bootstrap Intro with Task List", " 40 Bootstrap Intro with Task List (da=“Exercise”) This video is not yet transcribed because it was a lot of visual show-and-tell. Here are some time-stamp notes for things that could be transcribed: 00:19:00 to 00:30:49: useful validates, has_many, reset_session, new stuff and review 00:31:40 to 00:42:45: sample_data task (already chapter sample-data.md, but chapter uses Photogram and here done with Task List) 00:51:06 to 00:53:28: force_user_sign_in and skip_before_action is covered for the first time. "],["photogram-final.html", "41 Photogram Final", " 41 Photogram Final photogram-final.md https://github.com/appdev-projects/photogram-final "],["building-your-own-idea.html", "42 Building Your Own Idea", " 42 Building Your Own Idea long text with links to github and starting from scratch: https://canvas.uchicago.edu/courses/41147/assignments/465848 "],["extra-topics.html", "43 Extra Topics", " 43 Extra Topics extra topics, none of this is touched or transcribed: https://canvas.uchicago.edu/courses/41147/pages/extra-topics-written-guides-and-videos chapters: ransack.md image-uploads.md loading-data-from-a-csv-file-into-your-database.md google-map.md exporting-data-into-a-csv.md web-scraping-quickstart.md "],["terminology-technical-reference.html", "A Terminology Technical Reference", " A Terminology Technical Reference "],["ruby-technical-reference.html", "B Ruby Technical Reference", " B Ruby Technical Reference "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
