[["index.html", "AD1 Preface", " AD1 Ben + Raghu 2023-01-12 Preface This document is originally based on a chronological outline of the AppDev course content, from the Canvas material for “BUSN 36110 81 (Summer 2022) Application Development”. "],["planned-lms.html", "Planned LMS", " Planned LMS This is the basic outline of a “Lesson” in the planned LMS app, including the syntax for LTI placement and quiz questions class Person attr_accessor :first_name, :last_name def full_name &quot;#{first_name} #{last_name}&quot; end end Bullets More bullets A paragraph. LTI{Launch the tool}(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(20)[foo]{400} Bullets More bullets LTI{ }(https://lti-provider-example.herokuapp.com/lti_tool)[test]{secret}(10)[bar] Choose one First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option This is not correct because of xyz reason {: .choose_best #bin points=“30” answer=“3” } Choose all that apply First bullet point is the question itself? First option This is not correct because of xyz reason Second option This is not correct because of xyz reason Also not correct because of abc reason Third option That’s right! Because of xyz reason Fourth option That’s right! Because of xyz reason {: .choose_all #baz points=“30” answer=“[3, 4]” } "],["outline-notes.html", "1 Outline Notes", " 1 Outline Notes Although originally based on the chronological assignments on Canvas in “BUSN 36110 81 (Summer 2022) Application Development”, this book has some re-ordering. "],["updated-diátaxis.html", "1.1 Updated Diátaxis", " 1.1 Updated Diátaxis Update: in the original outline, sections were tagged with the type. We don’t need to be so strict, but we should adhere to some rules of thumb Terminology and code syntax should be collected in technical reference glossaries Video tutorials should not digress too much into explanations and generalizations How-to written guides and accompaniments to videos should be concise, with code that can be copy-pasted Explanations are room to expand on ideas and digress 1.1.1 Original Outline Diátaxis In an effort towards Diátaxis, the content is identified by small chunks of material with tags: da=“Tutorial” pratical-study quadrant practical guided tutorials that produce meaningful results avoid abstraction, generalization, explanation, choices da=“HowTo” pratical-work quadrant similar to tutorial, but more concise with no digression or teaching da=“Explain” theoretical-study quadrant understanding-oriented discussions referring to big-picture topics include concepts, connections, abstraction, generalzation, alternatives, optional readings da=“TechRef” theoretical-work quadrant indexes, glossaries, dictionaries pure information, concise, no ambiguity, provide examples da=“Exercise” our own this is not part of the cannon, but we add it The “TechRef” (glossaries) and “Exercise” (quizzes + projects) tags are obvious, so content in these categories is not explicitly labelled in the outline. Note, the difference between “Tutorials” and “HowTo” here. They are distinguished by the user needs: study (“Tutorial”) vs. work (“HowTo”). Tutorials provide a learning experience, how-to-guides help the user accomplish a task. Any video walkthroughs are “Tutorials” and their written accompaniments are “HowTos”. How-to-guides should never be videos, because a user should be able to quickly refer to what they need, without buffering or scrubbing. "],["technical-references-code-vs.-terminology.html", "1.2 Technical References: Code vs. Terminology", " 1.2 Technical References: Code vs. Terminology There are two types of technical references. One is for terms, the terminology reference, which can be related to specific programming languages, however, any examples of HTML tags, Ruby methods, etc. should go into the code reference. There is one code reference for each subject area: HTML+CSS, Ruby, etc. Both of these glossaries could be built up through the class, meaning the students would only see the most recent terms and those introduced previously. By the end, this is a long glossary sectioned by course units. These code references already exist: Ruby: Ruby Foundations Slides the-one-reference.md optional-syntaxes-in-ruby.md HTML + CSS: HTML + CSS Recap Slides html-reference.md html-cheatsheet.md classbook.md "],["whats-missing.html", "1.3 What’s missing?", " 1.3 What’s missing? Running list of things TODO: The location(s) of the technical references (“TechRef”), and how they are built up, currently found in glossaries. Command-line basics could just be a short “Tutorial” video along with a “TechRef” of all the commands shown in the course place to explain directory structure and filepaths Dedicated video + text content of technical setup. Gitpod and github accounts, opening gitpod workspace, tab organization, /git commiting, rails grade, etc. Can be done with “RPS HTML” or “String” as example. See [Gitpod Technical Setup]. Dedicated video + text content of gems and Gemfile (and maybe bundle). This is found throughout content right now. CSS reference, there is some here: classbook.md Text doc with “keyboard magic” commands (e.g., TAB completion, opening/clearing terminal). Dedicated video + text for ideas.firstdraft.com with domain model for OfferUp. See Domain Modeling Video tutorial for https://association-accessors.firstdraft.com/. This is in the last 10 minutes of Day 7 recording right now. Maybe a dedicated chapter for belongs_to, has_many, scope, through, and use of .joins() for queries. Dedicated video + text content for starting from scratch, generator resources, and migration. This is spread across videos (e.g., Day 7 video, Day 8 short video, Photogram and MSM signin), chapters (e.g., active-record.md, draft-generators.md, draft-account.md), classroom examples (Day 8 recordings). See Starting from Scratch with Generators API videos for Mailgun, Twilio, etc. Print stylesheet applied to any lesson to make hard copies (pdf) Heroku alternative video / writeup "],["course-overview.html", "2 Course Overview", " 2 Course Overview Notes: Non-transcribed video: Day 1 Recording Video content: Bird’s Eye View Slides Each slide section could be a separate video+text 01-09: Course intro 10-15: What does it mean to know how to code? 16-21: SaaS 22-26: URLs 27-33: Raghu’s journey 34-40: How learning SaaS has evolved 41-46: Ruby on Rails, Play the whole game 47-49: Teaching team 50-79: Record keeping (history, tables, databases, domain modeling, CRUD) 80-88: Must See Movies example relational database tables "],["course-intro.html", "2.1 Course intro", " 2.1 Course intro "],["what-does-it-mean-to-know-how-to-code.html", "2.2 What does it mean to know how to code?", " 2.2 What does it mean to know how to code? "],["saas.html", "2.3 SaaS", " 2.3 SaaS "],["urls.html", "2.4 URLs", " 2.4 URLs "],["etc.-from-slides.html", "2.5 etc. from slides", " 2.5 etc. from slides "],["technical-setup.html", "3 Technical Setup", " 3 Technical Setup Notes: These steps are done in the RPS HTML content (original video), and [String][Setting up String Gitpod] exercise (original video) This is a place to collect dedicated how-to-guides to refer students back to Dedicated video tutorials would be helpful here as well Project: N/A Target: N/A Useful chapters: day-2-notes.md getting-started-with-gitpod.md rails-grade.md fixing-your-organization-permissions.md gitpod-snapshot.md hard-reload.md using-git-to-experiement-and-save-work.md tips-and-tricks.md "],["setting-up-accounts.html", "3.1 Setting Up Accounts", " 3.1 Setting Up Accounts Notes: sections from day-2-notes.md 3.1.1 Get a GitHub account Sign up for a free GitHub account at github.com/join I recommend using your .edu email address, as that will qualify you for some discounts and coupons that you might want to use later. Remember to verify your email address after signing up. If you already have a GitHub account, I recommend making a new one for this class, because some of the tools that we use will ask for permission to view all of your repositories. If you have access to e.g. private work repositories, then you should make a new account and keep things separate. 3.1.2 Get a Heroku account Sign up for a free Heroku account at signup.heroku.com If asked what your primary development language is, say Ruby. You can use any one of your email addresses, but remember to verify it. 3.1.3 GitHub and Heroku readings While you’re waiting for everyone to finish creating accounts, read up on GitHub and Heroku. Think of question: Read about GitHub: http://bit.ly/2skLlYx Read about Heroku: http://bit.ly/2uLVTAP "],["gitpod.html", "3.2 GitPod", " 3.2 GitPod Notes: sections from getting-started-with-gitpod.md, tips-and-tricks.md, and hard-reload.md can use RPS HTML as example should include forking, workspace layout, bin/server, tab management could be chance to talk about file structures and terminal 3.2.1 Getting Started With Gitpod One of the most painful parts of learning how to program, in the old days, was simply setting up your computer to be able to write and run code. At a minimum, we needed to install: An application to write your code with. Something like Microsoft Word is not be ideal for writing code, since code needs to be plain text (just a series of characters in a file, nothing else) for the computer to understand it. Word is designed to write rich text (for humans) with fonts, colors, sizes, margins, layouts, etc. Computers come bundled with some plain text editors (Notepad, TextEdit, etc) but they are very basic. We would instead prefer to use powerful tools specifically designed for writing code with like Microsoft’s VSCode or JetBrains’ RubyMine. Ruby itself. Writing code is not useful on its own if we don’t have something to run it with; just like we need a browser installed to interpret .html files we need Excel installed to interpret .xls files, and we need Photoshop installed to interpret .ps files, we need Ruby installed in order to interpret the .rb files that we write. Not only that, we need the correct version installed. If your computer happened to come with an older version, upgrading to a newer version could be complicated — especially if some other application you use depends on the older version. There are so many different combinations of hardware, operating systems, previously installed software, permission levels (for example if you are using a work-owned computer), that just getting these things installed would often stop you before you started writing your first program. We can’t allow that! Instead, we’re going to use a write our code using a cloud computer. “Cloud” just means that it’s a computer that’s sitting in someone’s warehouse1 somewhere, and we rent it from them. It already has all of the software that we need installed on it, and we access it through our browsers. No muss, no fuss! Gitpod.io is a great new service that provides instantaneous, full-fledged cloud development environments from any codebase that is on GitHub.com — which is great, because we (and 98% of other teams) use GitHub to store all of our projects, homeworks, etc. The text editor they provide is based on Microsoft’s VSCode — my editor of choice. It will have the exact right version of Ruby, Rails, and everything else we need. And they have a very generous free tier. Great! Sign up for a Gitpod.io account. It will ask you to sign in using your GitHub account. We will create a workspace for each project that we work on. Each workspace is based on a GitHub repository (i.e., a folder with some code in it). For example, here is a repository: https://github.com/appdev-projects/helloruby To create a Gitpod workspace based on a repo, in the address bar of your browser enter https://gitpod.io/# and then the URL of the repo. For example, https://gitpod.io/#https://github.com/appdev-projects/helloruby To make that process easier, Gitpod has a browser extension that you can install if you want to. Typically, we will assign you a project in Canvas. The assignment will include a button that says “Load assignment in a new window”. When you click on that button, it will create a fork (i.e. a copy) of the repository (i.e. the folder of code) on your own GitHub account. You will then create a Gitpod workspace2 based on your fork, so that you can save the work that you do back to your own GitHub account. A button to create your Gitpod workspace will appear within the assignment, so usually all you need to do is click on it after clicking “Load assignment in a new window”. And then you can get right to work, with the exact right version of all of the project’s dependencies ready to go! 3.2.2 Forcing Chrome to “Hard” Refresh Sometimes, when we update a CSS stylesheet, our page appears not to change. This is especially frequent when we’re working on static HTML files in the public/ folder. The cause is usually Chrome’s aggressive “caching”, i.e. re-using static assets that it has already downloaded (for performance reasons). If we refresh an HTML page that we’ve updated, Chrome won’t necessarily also refresh all &lt;link&gt;ed CSS files — unless we ask it to by “hard” refreshing. To do so: Open the Dev Tools… from the View &gt; Developer menu or right-click on any element and Inspect or press F12 or Ctrl+Shift+J (on Windows) or Option+Command+J (on Mac) Right-click on the refresh button. Select “Empty cache and hard reload”. Open Dev Tools: With Dev Tools open, “hard” refresh: Your HTML document should now have the latest CSS and any other linked assets (like images or javascripts). 3.2.3 Gitpod keyboard shortcuts and other productivity tips 3.2.3.1 Important Terminal keystrokes to know 3.2.3.1.1 Jump to beginning of line You can’t use your mouse at the command line, so it’s important to know how to move around quickly so you’re not restricted to just using your arrows. Jump back to the beginning of the line with Ctrl + A: 3.2.3.1.2 Jump to end of line Mac OS, Windows: Ctrl + E 3.2.3.1.3 Up and down arrows to scroll through your history Use your up and down arrows to scroll through your command history so that you don’t have to re-type your commands over and over. 3.2.3.1.4 Clear Terminal Mac OS: Command + K Windows: Disabled by default3 From the menu open Preferences and select Keyboard shortcuts. Then search for “terminal clear” in the search bar and click the plus icon to the left of it. Finally, type ctrl + k and Enter to confirm. 3.2.3.1.5 Interrupt command If something goes wrong with a terminal program (i.e. you made a typo, a program gets stuck in an infinite loop, etc), you can generally interrupt it with Ctrl + C: 3.2.3.1.6 Q to exit When the output of a terminal command is too tall for a terminal tab to display at once, it paginates. Press Space to step through it one page at a time, or Q to quit and get back to the terminal prompt so that you can execute your next command. Mac OS, Windows: Q 3.2.3.2 Editor keyboard shortcuts 3.2.3.2.1 Command Palette The most important thing to memorize is how to open the Command Palette, which will allow you to fuzzy search within for all other commands. If the command has a keyboard shortcut mapped to it, the shortcut will be displayed to the right. This is the best way to learn the keyboard shortcuts for the commands that you use most frequently. Mac OS: Command + Shift + P Windows: Ctrl + Shift + P 3.2.3.2.2 Quick open file To quickly jump to a file: Mac OS: Command + P Windows: Ctrl + P And then fuzzily search for its name. For example, you could type “phco” to get to photos_controller.rb and the list would quickly narrow to bring that file to the top of the list. 3.2.3.2.3 Toggle Code Comment To quickly comment a line of code, put your cursor on that line and then: Mac OS: Command + / Windows: Ctrl + / You can also highlight multiple lines of code and comment/uncomment all of them at once. 3.2.3.2.4 Find (and replace) Mac OS: Command + F Windows: Ctrl + F 3.2.3.2.5 Find Next Selection Mac OS: Command + D Windows: Ctrl + D If you go too far by mistake, you can step backwards with Command + U or Ctrl + U. 3.2.3.2.6 Move line Mac OS: Option + ⬇ Windows: Alt + ⬇ 3.2.3.2.7 Duplicate line Mac OS: Shift + Option + ⬇ Windows: Shift + Alt + ⬇ 3.2.3.2.8 Add/Remove Tab spaces for multiple lines Mac OS: (Shift) + Tab Windows: (Shift) + Tab 3.2.3.2.9 Add More Cursors Mac OS: Option + Click Windows: Alt + Click 3.2.3.2.10 Embedded Ruby (ERB) Tag Toggle Mac OS, Windows: Ctrl + Shift + ` 3.2.3.2.11 Toggle Terminal Panel Mac OS: Command + J Windows: Ctrl + J 3.2.3.2.12 Open New Terminal Mac OS: Ctrl + ~ (i.e. Ctrl + Shift + `) Windows: Ctrl + ~ (i.e. Ctrl + Shift + `) A warehouse full of computers that people rent and connect to via the internet is called a “data center”. Some data centers have their own power plants, and some are even earthquake-proofed.↩︎ Gitpod will delete an inactive workspace after 14 days. If you want to save the changes you’ve made for longer, you can “pin” a workspace in Gitpod which will prevent it from being deleted. Even better, you can push your changes to Github.↩︎ A recent Gitpod update removed this keyboard shortcut for Windows, so you’ll need to configure it yourself.↩︎ "],["git.html", "3.3 Git", " 3.3 Git Notes: sections from using-git-to-experiement-and-save-work.md 3.3.1 What Git is Git is an extremely powerful version-control system created by Linus Torvalds in 2005 for development of the Linux kernel, which is one of the largest open-source software projects in existence. It makes it possible for large numbers of contributors to work on various features, all within a single codebase (which could be comprised of hundreds or thousands of files). Bitbucket, GitLab, and especially GitHub (all private companies) rode the rise of Git (the protocol) to become the center of the software development universe. All of these companies basically offer cloud-based storage for codebases using Git for version-control (we refer to these codebases as repositories), as well as a web-based interface for collaborating on them — following, commenting, etc. 3.3.2 Why we care In this course, we’re going to use one simple but effective Git-based workflow to save versions of our work. This will allow us to freely experiment with different approaches, while never having to throw away code. In all of our Rails apps, after you start the server, you can navigate to the address /git in your live application. If you’re using Gitpod, the URL will look like: https://[YOUR GITPOD WORKSPACE URL].gitpod.io/git That will open a page that looks like this: As soon as you make any changes to any of the code in the project, and refresh this page, the lines that you changed will appear: On the left, you see the code as it was previously; on the right, you see the new code. Lines added are highlighted in green, lines removed are highlighted in red. Below, there are two things you can do: commit your changes on the left, and switch to a new branch on the right. When you hear the word “commit”, think “snapshot”. When you hear the word “branch”, think “version”. A Git commit is a snapshot of all of the folders and files in your project at a particular time. Since our files of code are all interdependent, it doesn’t make sense to save versions of individual files — we need to know the entire state of the project for a version to be useful. Each branch (“version”) is a series of commits (“snapshots”). The most important thing for you to remember is simple: commit early and commit often. As long as you are taking snapshots of your work at various points, it will always be easy to get back to a previous state in case you want to start over and explore a different approach. To commit, enter a title for the snapshot (required), and, optionally, a longer description: After you commit, you will no longer have any pending changes: If you edit your code again, then you can make further commits. Fundamentally, that’s all you need to worry about: just make lots of commits as you work. The best time to commit is right after you just got something to work, before you start on your next experiment. Remember: ABC: Always Be Committing. 3.3.3 Jumping back in time In the History dialog at the bottom, you can see a list of all of the commits you’ve made. If you want to jump back in time to one of them, copy the 7 letter code (known as the “hash” of the commit; it is a unique identifier) in front of it into the “Branch off of” field above. Pick a name for a new version, and click “Create a new branch off of…”. It will snap all of the files in the project back to that point in time, and you can now make further commits along a new path — while still retaining all of your old commits on the old path. You can easily jump to any commit from any branch at any time — so feel free to experiment! Make a commit to save your current work, then jump back to a previous commit to try a different approach. 3.3.4 Switch to a Different Branch Have you gone back in time and decided your first attempt was better? Turn your attention to the “Existing Branches” panel on the right. This will list any branches your project has— master is the default starting branch. To switch to a different branch, click the blue double arrow button next to the name of the branch you want to switch to. If you’re ever unsure of what branch you’re on, the top of the page should list “On branch ___”. 3.3.5 Push to GitHub Gitpod workspaces are not permanent. Even if we make git commits, if the workspace is deleted so is all of our work! This is where GitHub comes in. We can push all of the commits we’ve made to our repository on GitHub where it will live forever. If our Gitpod workspace gets destroyed we can just re-create another one from the latest commit on GitHub! Before you can push to GitHub, you need to give Gitpod access. Head over to the Integrations under your account settings in Gitpod and make sure you check “public repos” and click “Update”. This should open a GitHub authorization dialogue. Make sure to click “Grant” next to the GitHub organization you created for class Now you should be all set to push your commits to GitHub! "],["rails-grade.html", "3.4 rails grade", " 3.4 rails grade Notes: sections from rails-grade.md, fixing-your-organization-permissions.md, and gitpod-snapshot.md kind of awkward placement, this video and text could go early in RPS HTML video manually checking work, rails grade, git commiting 3.4.1 Getting automated feedback with rails grade 3.4.1.1 Join GitHub If you haven’t already, sign up for a free GitHub account (or sign in to yours if you already have one): In this example screenshot, I chose a username of demolearner1 — remember yours. Also, don’t forget to check your email and verify the address you entered. For now, think of GitHub like Dropbox-for-programmers; it’s where we’re going to store all of our code. 3.4.1.2 Create GitHub organization To keep things organized, we’re going to create a separate GitHub organization account for you to store your AppDev projects under (to keep them separate from the personal projects that you’ll hopefully be building soon!). Click the + on the right side of the navbar and select “New organization”: Choose any name for the organization; most students choose [YOUR USERNAME]-appdev. In this example screenshot, I chose demolearner1-appdev: You can “Skip” or “Finish” the rest of the screens: 3.4.1.3 Login to Canvas Open up the Assignments tab and make sure they’re sorted by type. Scroll down to the assignment you want to start and click the link that says ‘Load [your assignment name] in a new window’ (the name of the project will vary). Before you click “Authorize”, make sure to click the “Grant” button next to the organization that you created earlier. Only then, click authorize to allow the firstdraft Grades application to access your account. Select the name of your GitHub organization and submit the form. The next screen will ask you to accept an invitation to a GitHub team. You can click the link on that screen to accept, or you’ll have an invitation in your email inbox as well. Once you’ve joined, you should see feedback that you’re now a member of appdev-projects: 3.4.1.4 Daily workflow The stuff above about setting up your organization and permissions was just a one-time thing. From now on, you’ll just head to Canvas and click “Load assignment in a new tab”. You should see something like the following (the name of the project will vary): We will automatically make a copy (a “fork”, in GitHub parlance) of the repository under your new GitHub organization. Then, you can choose to either “Create new workspace in Gitpod” or head to your “Gitpod Dashboard” to view existing workspaces. Either way, once you’re in the workspace, we can get the project loaded up and try out the feedback feature. After the bin/setup script is done running, start working on the project to do whatever the instructions tell you. When you’re ready for feedback, try a new command at a new Terminal prompt: rails grade You’ll be asked for your access token; copy-paste it carefully from the grades.firstdraft.com page that you loaded from Canvas. You should see output that looks like: Copy-paste the Results URL into a new tab, or click on it (but make sure it isn’t truncated). (Some projects aren’t graded; in that case there may only be one dummy test listed.) You can click on one of the tests to get more feedback on what might have gone wrong: In this case, the test expected to find an element with a class of word_count that contains the number 10, but instead it only found the content “Replace this string with your answer”. You can click the “Examine Test” button to read the actual Ruby of the automated test; it’s surprisingly readable. Ruby’s testing libraries use method names that are supposed to make tests readable even for non-technical managers and clients. You can see specifically what flow is being tested and what inputs are being used and what the expected output is, and try to reproduce the issue in your own app manually using the same inputs. You can run rails grade in your Terminal as many times as you want, and you will get a new updated build report each time. It will only report your highest score back to Canvas. Remember that your first job is always to make your app work as described and test it manually yourself. You should not rely exclusively on the automated tests; they are a terrible way to debug. 3.4.2 Fixing your organization permissions Once upon a time, we all created our own GitHub organizations to keep our classwork separate from our personal projects. Since then, whenever we gave permission to a third-party (like Gitpod or grades.firstdraft.com) to access our GitHub accounts, we were supposed to remember to grant access to our organization too. If you forgot to click “Grant” next to the organization that you created before you clicked “Authorize”, you’re going to run into problems. Let’s fix it. Go to GitHub and sign in. In this example, I am signed in as the user demolearner1. Click on the user icon in the top-right and find “Settings”: Next, click on “Organizations” in the left sidebar: Find the organization that you created. You likely picked a name like [YOUR USERNAME]-appdev: Next, go to the Settings of the organization: In the left sidebar, find “Third-party access”: If it says that you approved both, then you are good to go and you can go to the next section. If neither Cloud9 nor Grades appears in this list, click the “Remove restrictions” button instead and you can go to the next section. If it says that access is Denied next to Cloud9 or Grades, then proceed. Click on whichever one you denied and Grant Access: You should see a message confirming that access has been granted: Repeat for the other third-party app if necessary. 3.4.2.1 Make sure that you’ve accepted your team invitation Visit this page and make sure that you don’t have a banner across the top asking you to accept our team invitation. (This invitation was sent a while ago via email; if you’ve already accepted it, the banner won’t appear.) 3.4.2.2 Launch an assignment from within Canvas Head back to Canvas and click on whichever assignment you want to work on again (don’t just refresh it if you already had it up). You might be asked to enter your organization name — be sure to enter your organization name, the one you created; not appdev-projects. 3.4.2.3 Resetting OAuth permissions to square one If for some reason you need to make a single-sign-on provider (like GitHub, Twitter, or Facebook) “forget” that you ever authorized a third-party app, maybe because you don’t use it anymore or maybe because you want to change the permissions that you gave it, you need to delete or revoke the “access token” that you previously issued to it. In the case of GitHub, go to your personal settings: Find “Applications” in the left sidebar: Click the “Authorized OAuth Apps” tab and then click “Revoke” next to whichever one you want to “forget”: Then, return to the third-party app and “Sign in with…” again to start over from scratch. In our case, click on an assignment from within Canvas again to re-start the authorization process — and this time don’t forget to grant access to the organization that you created. 3.4.3 Sharing a Gitpod Snapshot It’s often helpful to share a snapshot of the state of your entire Gitpod workspace with someone else. 3.4.3.1 Take the snapshot From the hamburger menu in the top-left corner of your IDE, select Gitpod: Share Workspace Snapshot: 3.4.3.2 Copy the snapshot URL It will take a moment to create the snapshot. Then a dialog will pop up in the bottom-right corner that will give you the URL to copy and share: 3.4.3.2.1 The correct URL looks like this The URL that you share should look something like this: https://gitpod.io#snapshot/5a47e40d-e279-44e5-96bc-ae33cd48f151 Note the #snapshot fragment of the URL. That means you have the right one. 3.4.3.2.2 Not this The URL should not look something like this: https://ac1bde40-34e8-421d-a102-6425971fb9db.ws-eu38.gitpod.io/ That is the URL of your own IDE, which no one else can access. 3.4.3.2.3 Or this The URL should not look something like this: https://3000-ac1bde40-34e8-421d-a102-6425971fb9db.ws-eu38.gitpod.io Note the 3000- at the start. That is the URL of the live preview of your app. 3.4.3.3 Snapshots are completely independent When someone clicks on the snapshot URL, they will get their own private copy of your workspace in the state that it was in when you took the snapshot. Any changes they make to their copy will not affect your workspace. Similarly, any changes you make to your workspace won’t affect their snapshot. So you can keep trying to resolve the problem on your own, or work on the next task, without interfering with their snapshot. "],["rock-paper-scissors-html.html", "4 Rock, Paper, Scissors HTML", " 4 Rock, Paper, Scissors HTML Notes: The video is not yet transcribed and may change GitPod setup is contained in the video. This is an applied example and the Technical Setup chapter can be referred to as a how-to guide. Project (graded): https://github.com/appdev-projects/rps-html Target: https://rps-html.matchthetarget.com Useful chapters: html-reference.md html-cheatsheet.md "],["video-segment-1st-bite-size-chunk-of-rps-html.html", "4.1 Video Segment: 1st bite-size chunk of RPS HTML", " 4.1 Video Segment: 1st bite-size chunk of RPS HTML 4.1.1 Text Companion: 1st bite-size chunk of RPS HTML "],["video-segment-nth-bite-size-chunk-of-rps-html.html", "4.2 Video Segment: Nth bite-size chunk of RPS HTML", " 4.2 Video Segment: Nth bite-size chunk of RPS HTML The pattern repeats 4.2.1 Text Companion: Nth bite-size chunk of RPS HTML "],["finish-and-submit-rps-html.html", "4.3 Finish and Submit RPS HTML", " 4.3 Finish and Submit RPS HTML Refer students to rails grade, git, and Sharing a Gitpod Snapshot sections for how to get help "],["deploying-to-heroku.html", "5 Deploying to Heroku", " 5 Deploying to Heroku Notes: This could be a sub-section in Technical Setup The video is not yet transcribed and may change Project: N/A Target: N/A Useful chapters: deploying-to-heroku.md See Canvas "],["rock-paper-scissors-css.html", "6 Rock, Paper, Scissors CSS", " 6 Rock, Paper, Scissors CSS Notes: The video is not yet transcribed and may change Project (ungraded): https://github.com/appdev-projects/rps-css Target: https://rps-css.matchthetarget.com/rock Useful chapters: classbook.md#styling-with-css, but this is outdated? "],["video-segment-1st-bite-size-chunk-of-rps-css.html", "6.1 Video Segment: 1st bite-size chunk of RPS CSS", " 6.1 Video Segment: 1st bite-size chunk of RPS CSS 6.1.1 Text Companion: 1st bite-size chunk of RPS CSS "],["video-segment-nth-bite-size-chunk-of-rps-css.html", "6.2 Video Segment: Nth bite-size chunk of RPS CSS", " 6.2 Video Segment: Nth bite-size chunk of RPS CSS The pattern repeats 6.2.1 Text Companion: Nth bite-size chunk of RPS CSS "],["relationships.html", "7 Relationships", " 7 Relationships Notes: This was in-class work from the un-transcribed Day 2 recording Records and Relationships Slides 01: Get to know each other 02: Types of associations "],["practice-identifying-relationships.html", "7.1 Practice Identifying Relationships", " 7.1 Practice Identifying Relationships Notes: Records and Relationships Slides 03-25: Practice identifying relationship 26: ERD &amp; Ideas Slides (but this doesn’t actually come next) "],["html-css-stylesheets-and-design-recap.html", "8 HTML, CSS, Stylesheets, and Design Recap", " 8 HTML, CSS, Stylesheets, and Design Recap Notes: This was in-class work from the un-transcribed Day 2 recording Project (ungraded): Replits HTML and CSS Recap Slides "],["html-recap-and-replits.html", "8.1 HTML Recap and Replits", " 8.1 HTML Recap and Replits Notes: this could all just be in the technical reference for HTML, with Replit exercises following the review Useful chapters: html-reference.md html-cheatsheet.md HTML and CSS Recap Slides 01-05: HTML basics 05-07: HTML Replits "],["css-recap-and-replits.html", "8.2 CSS Recap and Replits", " 8.2 CSS Recap and Replits Notes: this could all just be in the technical reference for CSS, with Replit exercises following the review Useful chapters: classbook.md#styling-with-css, but this is outdated? HTML and CSS Recap Slides 09-13: CSS Fundamentals 14: CSS Fundamentals Replit 15: External style sheets 16: External style sheets Replit "],["stylesheets-recap-and-replits.html", "8.3 Stylesheets Recap and Replits", " 8.3 Stylesheets Recap and Replits Notes: HTML and CSS Recap Slides 20-23, 25-26: Borrowing style sheets 24: Google Fonts Replit 27: Font Awesome Replit 28: Bootstrap "],["design-resources.html", "8.4 Design Resources", " 8.4 Design Resources Notes: HTML and CSS Recap Slides 29: Readings 31-34: Basic rules (mixed in with some Replits) sections from design-resources.md As you go about designing and coding your application’s screens, here are a few things that you may find useful. 8.4.1 Readings I’ve placed them in rough order of my opinion of their value/length ratio. Butterick’s Typography In Ten Minutes 7 Rules for Creating Gorgeous UI - and part 2 Web Design in 4 minutes 8.4.2 Resources 8.4.2.1 Bootstrap Official Bootstrap documentation Everything in one place Bootstrap 5 cheatsheet — Since the official docs are really spread out, this cheatsheet can be easier to look through quickly. Bootswatch - Cheating! Great for quick styles while prototyping. The previews are also great for looking through quickly for useful components, almost like the Cheat Sheet above. Shoelace.io - A tool to help you create your Bootstrap grid layout. Premium Bootstrap themes Bootstrap.build Generate your own Bootswatch, essentially. If you don’t have your own brand identity created yet, you can practice by making a UChicago branded theme; see pages 38-41 of the Identity Guidelines. 8.4.2.2 Other design systems Bootstrap isn’t the only design framework in town. Here are a few more, just to give you an idea: Tailwind CSS — Imagine if Bootstrap only had utility classes, like the ones for spacing and shadows, but had a lot more than it does; and no components per se. That’s Tailwind — you’re expected to assemble your own cards, alerts, etc, out of the utility classes. Many people like it because it’s “lighter” than Bootstrap — it gives you the tools to build up your own, custom framework; but you’re still not starting from scratch. GOV.UK Design System and U.S. Web Design System — Government design systems, with accessibility and consistency as paramount concerns. Bulma and Foundation — More direct analogs to Bootstrap. 8.4.2.3 Fonts Font Awesome - Free, CSS-customizable, perfectly scalable icons for almost everything. Google Web Fonts - You’ll want this after reading Butterick’s. Google Web Font pairing inspiration: Typographic Project Beautiful Web Type FontPair Ultimate Google Web Font Pairings 8.4.2.4 Games to get good at CSS CSS Diner — Become a pro at CSS selectors. Useful if you plan to do a lot of web scraping. Flexbox Froggy — Get a better understanding of Flexbox, the reason that positioning things on the web is no longer a nightmare. 8.4.2.5 Stock images Unsplash Stock Up - A search engine for free stock photos. Subtle Patterns - A library of free, tileable, subtle background images. 8.4.2.6 HTML &amp; CSS references HTML validator The CSS Cascade — Learn how CSS specificity rules actually determine which one of competing rules gets applied to an element. HTML5 Element List - An excellent, categorized list of HTML elements. CSS Properties Reference 8.4.2.7 Generators CSS3 Generator - Generate CSS box shadows, text shadows, and gradients. Ultimate CSS Gradient Generator 8.4.2.8 Colors Defining colors in CSS Duo — Curated color pairings Adobe Color - Generate complementary colors. 8.4.3 Quick links to assets BootstrapCDN helpfully host bootstrap.css (and Bootswatches) on their own server. Ultimately, a quick and easy way to get all of Bootstrap and Font Awesome is to include the following in the &lt;head&gt; of your document: &lt;!-- Expand the number of characters we can use in the document beyond basic ASCII  --&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;!-- Make it responsive --&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- Connect Bootstrap CSS --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot; integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;!-- Connect Bootstrap JavaScript and its dependencies --&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js&quot; integrity=&quot;sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; &lt;!-- Connect Font Awesome --&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/js/all.min.js&quot;&gt;&lt;/script&gt; You can use a Bootswatch or your own customized bootstrap.css instead as the href, if you like. Have fun! "],["linkinbio.html", "9 Linkinbio", " 9 Linkinbio Notes: No video for this, only chapter Project (graded, submit a link): https://github.com/appdev-projects/linkinbio Target: https://rag.hu/04-layout Useful chapters copied in below: linkinbio.md Some social media apps, in particular Instagram, do not allow you to include links to other pages in posts. The only place you can include a URL is in your bio, and you can only include one. This soon led to a trend of people promoting something with a post, but including “Link in bio!” in the caption. They would then update the solitary link in their bio to the latest thing they wanted to promote. Soon, a bunch of services cropped up that allow people to manage multiple links in a single, mobile-friendly page; and include a link to that page in their bio. The most popular of these is Linktree, but there are many others. Linktree has many users, from media companies to celebrities to, most likely, some of your friends — and maybe even you? Here are some examples: HBO’s Instagram bio: And HBO’s list of links: Katy Perry’s Instagram bio: And Katy Perry’s list of links: In this project, we’re going to build our own mobile-friendly list of links that we can include in our social media profiles or anywhere else that we like. Here’s mine: There are several benefits to writing our own rather than using a service like Linktree: We can use our own custom domain name for it; rather than linktree.com/raghubetina, notice that my URL is simply rag.hu. We don’t have to pay. Linktree has a free tier with limited design options, but if you want access to the fun themes, analytics, or to remove the Linktree branding, you have to subscribe to their $5/mo or $9/mo plan. We have all the power of CSS at our fingerprints to customize the design. Linktree, like all “no code” tools, limits you to a set of pre-defined constraints that you have to work within. Not so if you’re writing the code yourself. For example, if you click through to mine, you’ll notice a lot of touches that aren’t available options even on the paid Linktree plans: an animated background, a “frosted glass” effect on the links, etc. It’s just plain fun! Let’s get started. "],["getting-started.html", "9.1 Getting started", " 9.1 Getting started We’re going to start our projects a little differently this time. Rather than clicking the “Load [assignment] in a new window” button in Canvas, which usually will automatically create your copy of the repository on your organization, you will manually create your own blank Rails app (the same steps you can follow any time you want to build your own, non-assigned projects): Visit our appdev-projects/base-rails repository and click the “Use this template” button. Then select “Create new repository” from the dropdown. On the next screen, leave the “Owner” dropdown alone. For “Repository name”, enter “your-username.github.io”. Substitute your own, real username for your-username. So, for example, my repo name is “raghubetina.github.io”. Make sure to include the “.github.io” part in the repo name. E.g.: Click “Create new repository from template”. Create a new Gitpod workspace based on your brand new repository: In a new tab’s address bar, type “gitpod.io/#”. Then copy-paste the URL of your new repository after that. The URL should look something like gitpod.io/#https://github.com/your-username/your-username.github.io Press return to visit that URL and Gitpod will automatically start creating a new workspace for you. Once you’re in to your new workspace, bin/server at a terminal tab as usual to start up your web server. Open your app preview in a new tab. Create a file called index.html in the public/ folder. Add “hello, world” and make sure that it shows up when you refresh your app preview. "],["first-things-first-the-content.html", "9.2 First things first — the content", " 9.2 First things first — the content To start with, we need content. You’ll probably want to gather: A profile picture for the top of the page. This doesn’t have to be an image of you; it can be anything. Unsplash is a great resource for high quality stock images if you don’t want to use an image of yourself. The URLs of your social media profiles. I used my GitHub, LinkedIn, Instagram, and Twitter pages. A list of links you want to share. I used a handful of essays and short stories that I find myself sharing with people often. Here are some examples that you can peruse for inspiration. A thumbnail image for each link. I used a few strategies to find an image for each link: Search Google images and look for one hosted on wikimedia.org. Searched Unsplash for a relevant image. Generate an image with AI. I downloaded the image and then uploaded it to my Gitpod workspace by drag-and-dropping it into the public/ folder. If you want to, you can use fake placeholder images and links for everything, but I encourage you to gather real content. It’ll be more fun, you’ll end up with a page that you can actually use on your social media profiles, and you’ll have a good piece for your portfolio. "],["basic-html-structure.html", "9.3 Basic HTML Structure", " 9.3 Basic HTML Structure Let’s add our images, copy, and links. I wrapped each block of content in a &lt;div&gt; for now, to create some separation. I also gave each &lt;div&gt; a class=\"\" attribute; since we haven’t written any CSS yet, they don’t do anything, but they help me remember what each &lt;div&gt; represents. Something like this: &lt;div class=&quot;banner&quot;&gt; &lt;img src=&quot;profile-pic.jpg&quot; alt=&quot;Raghu Betina headshot&quot;&gt; &lt;/div&gt; &lt;div class=&quot;name&quot;&gt; Raghu Betina &lt;/div&gt; &lt;div class=&quot;social-icons&quot;&gt; &lt;a href=&quot;https://github.com/raghubetina&quot; target=&quot;_blank&quot;&gt; GitHub &lt;/a&gt; &lt;a href=&quot;https://www.linkedin.com/in/raghubetina/&quot; target=&quot;_blank&quot;&gt; LinkedIn &lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/raghubetina/&quot; target=&quot;_blank&quot;&gt; Instagram &lt;/a&gt; &lt;a href=&quot;https://twitter.com/raghubetina&quot; target=&quot;_blank&quot;&gt; Twitter &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;link&quot;&gt; &lt;img src=&quot;https://www.ycombinator.com/assets/ycdc/yc-og-image-0cfa80cac837d64d9b4f0705950000b66906ac032791376bd721f246fafcc7b4.png&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;http://paulgraham.com/startupideas.html&quot;&gt;How to Get Startup Ideas — Paul Graham&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;link&quot;&gt; &lt;img src=&quot;/thumbnails/typography.jpg&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://practicaltypography.com/typography-in-ten-minutes.html&quot;&gt;Typography in ten minutes — Matthew Butterick&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;link&quot;&gt; &lt;img src=&quot;https://media.newyorker.com/photos/59096d451c7a8e33fb38e4ca/16:9/w_1280,c_limit/071210_r16884_p646.jpg&quot;&gt; &lt;a target=&quot;_blank&quot; href=&quot;https://www.newyorker.com/magazine/2007/12/10/the-checklist/&quot;&gt;A Life-Saving Checklist — The New Yorker&lt;/a&gt; &lt;/div&gt; &lt;!-- Etc, for as many links as you want --&gt; Of course, I also have the standard HTML boilerplate (&lt;html&gt;, &lt;head&gt;, &lt;body, etc) in order to make it a valid document. Two things to notice: I’m using the target=\"_blank\" attribute on any links that I want to open in a new tab. For images that I am serving from my own public/ folder: I created a subfolder called thumbnails to help keep things organized, and moved the images there. When referencing the URL of the image in a src=\"\" attribute, I start with a leading slash — e.g.: &lt;img src=&quot;/thumbnails/typography.jpg&quot;&gt; I do not include /public in the URL. At this stage, your page technically serves its purpose — a collection of links people can click on — but it probably looks terrible, like this. "],["html-validator.html", "9.4 HTML Validator", " 9.4 HTML Validator If at any point your HTML breaks, or you suspect you e.g. forgot a closing tag but can’t find it, the W3C HTML Validator might come in handy. Paste in your entire HTML document and click “Check”, and it will give you a list of feedback. Some of them are yellow warnings and can be safely ignored for now, but any critical mistakes (like missing closing tags or quotation marks) will show up as red errors. For example, if you run your HTML through the validator right now (try it), it will display a bunch of errors because we don’t have alt=\"\" attributes on our &lt;img&gt;s. These are important to include for accessibility reasons, and just in case the image breaks for some reason (i.e. the URL changes). We should add descriptive alternative text for each image. "],["view-source.html", "9.5 View Source", " 9.5 View Source You should try to type out your page yourself — avoid copy-pasting. Making mistakes, fixing them, and developing your own muscle memory is important. That said, after you’ve attempted it yourself, you can View Source (Windows: Ctrl+U or Mac: Command+Option+U) on any of my example intermediate pages to see my code. "],["sizing-images.html", "9.6 Sizing images", " 9.6 Sizing images Now, let’s start to make the page look better. Let’s add a &lt;style&gt; element inside the &lt;head&gt; of the document so that we can begin applying CSS. We won’t use an external stylesheet for now, since we’re only planning to apply this CSS to a single page. Maybe we can start by giving the body some breathing room with top and bottom padding: &lt;style&gt; body { padding-top: 40px; padding-bottom: 40px; } &lt;/style&gt; Let’s start by sizing the profile picture. We need to give it a class so that we can apply CSS rules to it — let’s call it banner-image: &lt;div class=&quot;banner&quot;&gt; &lt;img src=&quot;profile-pic.jpg&quot; alt=&quot;Raghu Betina headshot&quot; class=&quot;banner-image&quot;&gt; &lt;/div&gt; Then, let’s make the banner image 128 pixels by 128 pixels: &lt;style&gt; .banner-image { width: 128px; height: 128px; } &lt;/style&gt; Unless your original image was exactly square, this probably will look squished when you check out the results. To solve this problem, we can use the object-fit property: .banner-image { width: 128px; height: 128px; object-fit: cover; } It’s quite common to see circular profile pictures. If you want to, set a large border-radius to achieve that: .banner-image { width: 128px; height: 128px; object-fit: cover; border-radius: 128px; } I didn’t use one on my profile picture, but you should feel free to get creative with borders, as well. Similarly, let’s size all of the thumbnail images as 48px by 48px: .thumbnail { width: 48px; height: 48px; border-radius: 48px; object-fit: cover; } Don’t forget to add the class to the relevant &lt;img&gt; elements. Now, your page should look something like this — much better. "],["basic-colors.html", "9.7 Basic colors", " 9.7 Basic colors Let’s add some color to make it easier to see how much space each element is occupying. We’ll, at a minimum, need a color for the background of the entire page and for each link. You can come up with your own palette, or you can use Happy Hues, a nice set of curated color palettes. I used this palette. I used the background color, headline color, button color, and button text color like this: body { background-color: #004643; } .name { color: #fffffe; } .social-icons a { color: #fffffe; text-decoration: none; } .link { background-color: #f9bc60; } .link a { color: #001e1d; text-decoration: none; } As you can see, I also removed the underlines from links with text-decoration: none. Notice that I used the descendant combinator: .link a { /* ... */ } This selector targets only &lt;a&gt; elements that are descendants of elements with class link. This is a handy alternative to adding a new class to all of the elements I’m interested in targeting.4 My page now looks like this. If you want to become a pro at writing CSS selectors, I recommend an interactive tutorial/game called CSS Diner. If you make it through all 32 levels, you’ll be better than most front-end developers at writing advanced CSS selectors. In addition to making it easier to style your own pages, knowing how to write advanced selectors will pay dividends if you’re interested in doing any web scraping.↩︎ "],["layout.html", "9.8 Layout", " 9.8 Layout Now, for the interesting part — laying out the elements where we want them on the page. 9.8.1 Overall page layout Since this is a relatively simple, single-column layout, we could stay in the normal flow mode and achieve most of the positioning that we want with margin and padding. But let’s use display: flex instead. It will make it much easier to do things like vertically center the text within each link’s box. First, I’ll wrap all of our content — the div.banner, the div.name, the div.social-icons, and all of the div.links — within a new parent &lt;div&gt; with a class called items. This will make it easier for me to position and size everything uniformly. Then I will switch the layout mode of the new div.items from the default normal flow to flex: .items { display: flex; } If you try that and refresh your page, you’ll see that all of the elements are now horizontally side-by-side. This is because the default flex-direction is row. Let’s switch the flex-direction to column to lay them out vertically again: .items { display: flex; flex-direction: column; } If you refresh, you’ll see the layout is vertical again. When we’re using display: flex mode, we can use the gap property to provide some breathing room between each child element, rather than having to add margin: .items { display: flex; flex-direction: column; gap: 30px; } On laptop screens, the buttons are running all the way to the edge of the screen, which isn’t very attractive. Let’s set a max-width of around 640px (you choose a value that looks good to you): .items { display: flex; flex-direction: column; gap: 30px; max-width: 640px; } 9.8.2 Layout for each link Within each link, it would be nice if: The thumbnail and text were vertically centered within the box. The text was horizontally centered in the space remaining next to the thumbnail. display: flex to the rescue! 9.8.2.1 Vertically centering with align-items We can vertically center child elements with the align-items property: .link { background-color: #f9bc60; display: flex; align-items: center; } If you refresh, the thumbnails should be lined up nicely with the link text. 9.8.2.2 flex-grow Next, let’s center the text of each link. I’m going to expand the existing rule that we have for .link a. Can we simply add text-align: center and call it a day? .link a { color: #001e1d; text-decoration: none; text-align: center; } If you refresh, you’ll see that didn’t work. Why? To make it easier to see things while I am working on layouts, I often use the following hack: * { border: thin red solid; } This puts a thin red border around every element. Your page should now look something like this: We can see that the &lt;a&gt; elements are only just wide enough to fit their content, so centering within them isn’t doing anything. Instead, we want the &lt;a&gt; element to occupy all of the available space to the right of the thumbnail. To achieve, this we can use the flex-grow property: .link a { color: #001e1d; text-decoration: none; text-align: center; flex-grow: 1; } Now the &lt;a&gt; element grows to fill any available space, while the &lt;img&gt; element stays the same size (it still has the default value for flex-grow, which is 0). And our text should be nicely centered since we already added the text-align. 9.8.2.3 justify-content Now let’s take care of centering the profile picture and name, as well as putting some breathing room between the social links. Flexbox has a wonderful property called justify-content that will help with all of these things: .name { color: #fffffe; display: flex; justify-content: center; } .banner { display: flex; justify-content: center; } .social-icons { display: flex; justify-content: space-around; } You could also use the same technique to center the div.items within the &lt;body&gt;: body { display: flex; justify-content: center; } But then we again need to tell the child elements to grow to take up all available space with flex-grow: .items { display: flex; flex-direction: column; gap: 30px; max-width: 640px; flex-grow: 1; } Our page layout should now look solid! Let’s add a little bit of padding inside our div.links: .link { background-color: #f9bc60; display: flex; align-items: center; padding: 5px; } It should now be safe to remove the * { border: thin red solid; } hack, unless you want to continue playing with layout, padding, etc. Our page now looks something like this. "],["deploy.html", "9.9 Deploy!", " 9.9 Deploy! We’ve made a lot of progress, and our list of links is functional and looking pretty solid! We can and will spend more time fine-tuning, but this seems like a great time to deploy our app to industrial-grade hosting so that we can actually link to it in our bios! Sadly, after over a decade, Heroku’s free tier was eliminated as of November 28th, 2022. There are some silver linings — they have launched a new discount through GitHub Student, and they created a couple of new, less expensive plans (Eco, Basic, Mini). For full-stack, dynamic, interactive, database-backed apps, I plan to still use Heroku. However, Heroku is no longer a good choice for hosting static HTML websites. There are several other free and fast options for that (e.g. Netlify and Vercel). Today, I want to show you GitHub’s offering for hosting static websites: GitHub Pages. We will deploy our Link In Bio via GitHub Pages. This will have several benefits: It’s free. It is tightly integrated with GitHub repositories (obviously), so all we need to do to deploy is what we do anyway — make a commit and push to GitHub . It doesn’t have any of Heroku’s old free tier’s restrictions. It will be up 24/7/365. It automatically includes SSL for custom domains (important if you’re using a top-level domain that requires https, like .dev). GitHub Pages sites are automatically assigned a subdomain under .github.io. This carries some developer cred. Or you can easily use your own domain. Here’s what to do to get your first GitHub Pages site going: Visit /git. Make a commit and then push the changes you’ve made so far to your GitHub repository. That’s it! In a few minutes, your site should be live at https://your-username.github.io! Eventually, consider adding some other pages to your site besides just index.html — a list of projects that you’ve built, for example. If you want to use a custom domain name like yourname.com rather than something like your-username.github.io, then you’ll first have to purchase a domain. I recommend Porkbun, or, for more exotic top-level domains, Gandi.net. Here is a guide to adding your own domain to your Pages site. Let me know if you get stuck. You can create as many GitHub Pages sites as you want — one per repo. Read more about GitHub Pages here. "],["this-is-the-end-of-the-required-portion.html", "9.10 This is the end of the required portion", " 9.10 This is the end of the required portion This is the end of the required portion of this assignment. In Canvas, submit the URL of your deployed app (something.github.io, not your GitPod preview). If you are willing to share your creation, please also include “Add me to the showcase” in the submission text area. "],["make-it-your-own.html", "9.11 Make it your own", " 9.11 Make it your own Now that we have the basics up and running, it’s time for you to get creative and make it your own! You can continue to make changes, commit, and push them to deploy. We aren’t grading for anything particular, so just have fun with it. Here are a bunch of resources for you to explore: 9.11.1 Fun design resources The following are a collection of neat tools that will help you create interesting backgrounds, generate gradients and shadows, find font pairings, etc. Glance at each one and pick one or two to integrate into your design. If you want to bounce ideas on things you can integrate, chat with an instructor. Once you’ve picked something to add, try to figure out how to integrate it on your own; ask lots of questions when you get stuck. 9.11.1.1 Icons To use Font Awesome icons (for example, for your LinkedIn/GitHub/Twitter/etc links), first include this in the &lt;head&gt; of your document: &lt;!-- Connect Font Awesome --&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/js/all.min.js&quot;&gt;&lt;/script&gt; Then peruse the icon list and copy-paste the code examples into your HTML. 9.11.1.2 Fonts The Ultimate Collection of Google Font Pairings (Displayed Beautifully with Classic Art) Reading: Typography in Ten Minutes 9.11.1.3 Images Unsplash: Search engine for free stock images. Dezgo: AI image generation. Image Optimizer: Reduce your images’ filesize in case they’re taking too long to load. Clippy: Create geometric masks for your images. 9.11.1.4 Color palettes Happy Hues 9.11.1.5 Shadow generators CSS Shadow Palette Generator 9.11.1.6 Gradient generators Vivid Gradient Generator Easing Gradients 9.11.1.7 Patterns CSS Background Patterns Repper Pocoloco 9.11.1.8 Generative art Silk Haikei Tabbied 9.11.1.9 Filters https://css-tricks.com/almanac/properties/b/backdrop-filter/ https://css-tricks.com/almanac/properties/f/filter/ 9.11.2 Always be committing Be sure to make lots of git commits along the way as you work! Have fun ☺️ "],["intro-to-ruby.html", "10 Intro to Ruby", " 10 Intro to Ruby Notes: These are all the pre-class Ruby homework assignments consisting of a reading with Replits, potentially followed by a GitPod exercise. The chapter and project repository is listed in each sub-section. The README from the project repository needs to be integrated here. There is an un-transcribed video associated with String that serves as review of the Technical Setup. Useful chapters: the-one-reference.md "],["nouns-verbs-and-grammar.html", "10.1 Nouns, Verbs, and Grammar", " 10.1 Nouns, Verbs, and Grammar Notes: nouns-verbs-and-grammar.md "],["program-notes.html", "10.2 Program Notes", " 10.2 Program Notes Notes: program-notes.md "],["string.html", "10.3 String", " 10.3 String Notes: string.md setup video Project: https://github.com/appdev-projects/string-chapter "],["integer.html", "10.4 Integer", " 10.4 Integer Notes: integer.md Project: https://github.com/appdev-projects/integer-chapter "],["float.html", "10.5 Float", " 10.5 Float Notes: float.md Project: https://github.com/appdev-projects/float-chapter more-on-floats.md "],["date.html", "10.6 Date", " 10.6 Date Notes: date.md Project: https://github.com/appdev-projects/date-chapter "],["array.html", "10.7 Array", " 10.7 Array Notes: array.md Project: https://github.com/appdev-projects/array-chapter "],["conditionals.html", "10.8 Conditionals", " 10.8 Conditionals Notes: conditionals.md Project: https://github.com/appdev-projects/if-statements-chapter "],["loops.html", "10.9 Loops", " 10.9 Loops Notes: loops.md Project: https://github.com/appdev-projects/loops-chapter "],["each.html", "10.10 Each", " 10.10 Each Notes: each.md Project: https://github.com/appdev-projects/each-chapter "],["hash.html", "10.11 Hash", " 10.11 Hash Notes: hash.md Project: https://github.com/appdev-projects/hash-chapter "],["our-own-classes.html", "10.12 Our own classes", " 10.12 Our own classes Notes: our-own-classes.md Project: https://github.com/appdev-projects/our-own-classes-chapter "],["ruby-gym.html", "11 Ruby Gym", " 11 Ruby Gym Notes: Ruby Foundations Slides (https://firstdraft.slides.com/raghubetina/05-ruby-foundations?token=SFyjvCyP) 01-06: Basic recap 07-08: Inventors, google-fu Chapters: - the-one-reference.md 11.0.1 Ruby Gym (da=“Exercise”) https://checkins.firstdraft.com/exercises/113/student 11.0.2 Optional Ruby Practice (da=“Exercise”) See Canvas, links to Treehouse (https://teamtreehouse.com/library/ruby-basics-2) and CodeCademy (https://www.codecademy.com/learn/learn-ruby) "],["rock-paper-scissors-rcav.html", "12 Rock, Paper, Scissors RCAV", " 12 Rock, Paper, Scissors RCAV Notes: Original video transcription: adding-routes-RPS-RCAV.md Original text: adding-routes.md, rcav-flowchart.md, Routing - RCAV Slides Project: https://github.com/appdev-projects/rps-rcav 12.0.1 Video Segment: Dynamic Web Applications and URLs (da=“Explain”) request lifecycle of Route, Controller, Action, View web interface and URLs actions render and redirect 12.0.1.1 Text Companion: Dynamic Web Applications and URLs (da=“Explain”) 12.0.2 Video Segment: Route (da=“Explain”) all about routing and config/routes.rb get() 12.0.2.1 Text Companion: Route (da=“Explain”) 12.0.3 Video Segment: Controller, Action, View (da=“Explain”) all about app/controllers/ ApplicationController inheritance 12.0.3.1 Text Companion: Controller, Action, View (da=“Explain”) 12.0.4 Video Segment: Dropping self. (da=“Explain”) why we drop self. 12.0.4.1 Text Companion: Dropping .self (da=“Explain”) 12.0.5 Video Segment: Our First RCAV (da=“Tutorial”) debugging an RCAV for /rock RTEM ends with redirect_to 12.0.5.1 Text Companion: Our First RCAV (da=“HowTo”) 12.0.6 Video Segment: Render HTML (da=“Tutorial”) from render({ :plain =&gt; \"Hello, world!\" }) to render({ :template =&gt; \"game_templates/user_rock.html.erb\" }) .html vs. .html.erb app/views/ view templates rather than public/ 12.0.6.1 Text Companion: Render HTML (da=“HowTo”) 12.0.7 Video Segment: Embedded Ruby Tags (da=“Tutorial”) all about &lt;% %&gt; and &lt;%= %&gt; in a view template 12.0.7.1 Text Companion: Embedded Ruby Tags (da=“HowTo”) 12.0.8 Video Segment: Control Flow with Embedded Ruby (da=“Tutorial”) conditionals all about &lt;% if ... %&gt; 12.0.8.1 Text Companion: Control Flow with Embedded Ruby (da=“HowTo”) 12.0.9 Video Segment: Homepage (da=“Tutorial”) RCAV with render for / 12.0.9.1 Text Companion: Homepage (da=“HowTo”) 12.0.10 Video Segment: Reinforce RCAV with /paper (da=“Tutorial”) RCAV with render for /paper 12.0.10.1 Text Companion: Reinforce RCAV with /paper (da=“HowTo”) 12.0.11 Video Segment: Embedded Ruby in the Controller with Instance Variables (da=“Tutorial”) moving conditional control flow &lt;% if ... %&gt; from /rock into the ApplicationController action play_rock local variables vs. instance variables with @-notation 12.0.11.1 Text Companion: Embedded Ruby in the Controller with Instance Variables (da=“HowTo”) 12.0.12 Video Segment: Linking Pages with Layouts (da=“Tutorial”) all about app/views/layouts/wrapper.html.erb to get some headers, footers, and navigation links layout(\"wrapper.html.erb\") in ApplicationController :layout argument for render() 12.0.12.1 Text Companion: Linking Pages with Layouts (da=“HowTo”) 12.0.13 Finish and Submit RPS RCAV (da=“Exercise”) 12.0.14 RCAV Addendums Stuff that I did not zip in from the chapter adding-routes.md: Addendum: Rendering JSON Addendum: Custom Controller Files "],["omnicalc-1.html", "13 Omnicalc 1", " 13 Omnicalc 1 (Forms and Query Strings) Transcription forms-query-strings-and-params-Omnicalc-Part1.md contains time-stamped sections matching the headings here Chapters (and slides): forms-query-strings-and-params.md Project: https://github.com/appdev-projects/omnicalc-1 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 13.0.1 Video Segment: Exploring the Target (da=“Explain”) we want forms to get information what is a query string 13.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 13.0.2 Video Segment: /square/new RCAV (da=“Tutorial”) RCAV with RTEM for /square/new debugging 13.0.2.1 Text Companion: /square/new RCAV (da=“HowTo”) 13.0.3 Video Segment: /square/new Form (da=“Tutorial”) building a form in the /square/new view template &lt;form&gt;&lt;/form&gt;, &lt;label&gt;&lt;/label&gt;, &lt;input&gt;, &lt;button&gt;&lt;/button&gt; valid forms with for=\"\" and id=\"\" 13.0.3.1 Text Companion: /square/new Form (da=“HowTo”) 13.0.4 Video Segment: Query String and Parameters Hash (da=“Tutorial”) everything after ? from /square/new form and the Parameters Hash 13.0.4.1 Text Companion: Query String and Parameters (da=“HowTo”) 13.0.5 Video Segment: /square/results RCAV (da=“Tutorial”) building the /square/results RCAV and form more on query strings 13.0.5.1 Text Companion: /square/results RCAV (da=“HowTo”) 13.0.6 Video Segment: Form Action and params (da=“Tutorial”) adding action=\"/square/results\" to the /square/new form using params Hash in the /square/results action to fetch from query string, calculate, and display 13.0.6.1 Text Companion: Form Action and params (da=“HowTo”) 13.0.7 Video Segment: Independence of Routes (da=“Tutorial”) use /random/results RCAV developed before /random/new to highlight independence of routes 13.0.7.1 Text Companion: Independence of Routes (da=“HowTo”) 13.0.8 Finish and Submit Omnicalc 1 (da=“Exercise”) see forms-query-strings-and-params-Omnicalc-Part1.md “Notes from the README” section for additional stuff that could go here "],["fortune-teller.html", "14 Fortune Teller", " 14 Fortune Teller Transcription fortune-teller.md contains time-stamped sections matching the headings here Chapters (and slides): README text at bottom of fortune-teller.md adding-routes.md rcav-flowchart.md Routing – RCAV Slides: https://firstdraft.slides.com/raghubetina/06-routing-rcav?token=43w7FD8Q Project: https://github.com/appdev-projects/fortune-teller Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 14.0.1 Video Segment: Routes and Controllers in Fortune Teller (da=“Tutorial”) practice routing stepping away from app/controllers/application_controller.rb, and using app/controllers/numbers_controller.rb inheritance: NumbersController &lt; ApplicationController &lt; ActionController::Base 14.0.1.1 Text Companion: Routes and Controllers in Fortune Teller (da=“HowTo”) 14.0.2 Video Segment: .each Loop on @ Instance Variable (da=“Tutorial”) from @zebra instance variable array to .each loop in the view template for /lottery/lucky embedded Ruby tags &lt;%= %&gt; vs. &lt;% %&gt; 14.0.2.1 Text Companion: winners Action (da=“HowTo”) 14.0.3 Video Segment: RCAV /lottery/unlucky (da=“Tutorial”) RCAV practice. re-do the /lottery/lucky but with different copy. try to type everything, avoid copy-paste 14.0.3.1 Text Companion: RCAV /lottery/unlucky (da=“HowTo”) 14.0.4 Video Segment: Navbar and Zodiac Debugging (da=“Tutorial”) aside to app/views/layouts/application.html.erb to show debug /zodiacs/aries together RTEM 14.0.4.1 Text Companion: Navbar and Zodiac Debugging (da=“HowTo”) 14.0.5 Finish and Submit Fortune Teller (da=“Exercise”) see README text at bottom of fortune-teller.md for additional stuff “Debugging checklist” that could go here "],["omnicalc-2.html", "15 Omnicalc 2", " 15 Omnicalc 2 (Forms, Params, APIs) Transcription Omicalc-Part2.md contains time-stamped sections matching the headings here Chapters (and slides): forms-query-strings-and-params.md omnicalc-api.md meteorologist-intro-to-apis.md storing-credentials-securely.md google-translate.md sending-emails-and-texts.md Right now a bunch of this found much later in the Day 5 material on Canvas. See my notes below, APIs might need devoted video (maybe one for each API). Project: https://github.com/appdev-projects/omnicalc-2 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 15.0.1 Video Segment: Exploring the Target (da=“Explain”) doing math, intro to APIs Street to Coordinates Translate with SMS 15.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 15.0.2 Video Segment: Reviewing Query Strings (da=“Tutorial”) examine target /wizard_add and implement using query string and params 15.0.2.1 Text Companion: Reviewing Query Strings (da=“HowTo”) 15.0.3 Video Segment: Reviewing Forms (da=“Tutorial”) examine target /add and implement using forms 15.0.3.1 Text Companion: Reviewing Forms (da=“HowTo”) 15.0.4 Video Segment: Intro to APIs with Street to Coordinates (da=“Tutorial”) there is a bunch of explanation here about APIs implementing /experiment for “Street to Coordinates” API keys JSON Google Maps API JSON to Hash with JSON.parse(open(@url).read) 15.0.4.1 Text Companion: Intro to APIs with Street to Coordinates (da=“HowTo”) 15.0.5 Finish and Submit Omnicalc 2 (da=“Exercise”) see README text at bottom of Omicalc-Part2.md for additional stuff that could go here API stretch goal should maybe go in a separate place? "],["refactoring-fortune-teller-with-dynamic-routes.html", "16 Refactoring Fortune Teller with Dynamic Routes", " 16 Refactoring Fortune Teller with Dynamic Routes There is no video yet, everything is in the chapter refactoring-fortune-teller-with-dynamic-routes.md Chapters (and slides): refactoring-fortune-teller-with-dynamic-routes.md README text at bottom of fortune-teller.md rcav-flowchart.md Project: https://github.com/appdev-projects/refactoring-fortune-teller Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 16.0.1 Video Segment: Part 1: Dice (da=“Tutorial”) dynamic route segments see refactoring-fortune-teller-with-dynamic-routes.md chapter section get(\"/roll/:number_of_dice/:how_many_sides\", { :controller =&gt; \"dice\", :action =&gt; \"infinity_and_beyond\" }) params.fetch(\"number_of_dice\") and params.fetch(\"how_many_sides\") 16.0.1.1 Text Companion: Part 1: Dice (da=“HowTo”) 16.0.2 Video Segment: Part 2: Horoscopes (da=“Tutorial”) dynamic route segments, our own classes see refactoring-fortune-teller-with-dynamic-routes.md chapter section Zodiac class in app/models/ get(\"/zodiacs/:the_sign\", { :controller =&gt; \"fortunes\", :action =&gt; \"horoscopes\" }) String#to_sym regressions and refactoring, importance of automated tests 16.0.2.1 Text Companion: Part 2: Horoscopes (da=“HowTo”) 16.0.3 Finish and Submit Refactoring Fortune Teller (da=“Exercise”) optional extra challenge, refactor RPS RCAV with dynamic routes "],["classroom-domain-modeling.html", "17 Classroom Domain Modeling", " 17 Classroom Domain Modeling (da=“Explain”) this was largely a classroom exercise and is partially written up in day-5-domain-modeling.md ERD and Ideas Slides (https://firstdraft.slides.com/raghubetina/erd-and-ideas?token=B9Lja2V8) 01-09: review MSM tables 10-11: Yap model 12-15: Photogram model 16-17: Very Best model 18: entity relationship diagrams (https://www.lucidchart.com/pages/er-diagrams#section_0) 19-23: model Booth Ride Share, MyFitness, Chew, Mock Interviewer "],["rubber-duck-debugging.html", "18 Rubber Duck Debugging", " 18 Rubber Duck Debugging (da=“Explain”) just a reading: https://www.thoughtfulcode.com/rubber-duck-debugging-psychology/ "],["omnicalc-debug.html", "19 Omnicalc Debug", " 19 Omnicalc Debug Optional Practice (da=“Exercise”) Un-graded assignment, but there are tests built in Chapters (and slides): refactoring-fortune-teller-with-dynamic-routes.md README text at https://github.com/appdev-projects/omnicalc-debug#readme Project: https://github.com/appdev-projects/omnicalc-debug "],["apis-demo.html", "20 APIs Demo", " 20 APIs Demo Google Translate and SMS with Twilio, Optional (da=“Tutorial”, da=“Explain”) No video Chapters (and slides): google-translate.md sending-emails-and-texts.md storing-credentials-securely.md Project: Start: https://github.com/appdev-targets/omnicalc-2-api-starting-point Solution: https://github.com/appdev-targets/omnicalc-2-api-starting-point/tree/translate-solution "],["msm-queries.html", "21 MSM Queries", " 21 MSM Queries (Intro to Databases) Transcription MSM-queries.md contains time-stamped sections matching the headings here Chapters (and slides): active-record.md our-own-classes.md “additional query tasks” from the README at the bottom of MSM-queries.md Project: https://github.com/appdev-projects/msm-queries Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 21.0.1 Video Segment: Recordkeeping Review, Exploring the Target (da=“Explain”) showing Bird’s Eye View Slides 72-73 database backed web appplication explore /directors/youngest and /directors/eldest explore index (tables) and show (details) pages 21.0.1.1 Text Companion: Recordkeeping Review, Exploring the Target (da=“Explain”) 21.0.2 Video Segment: Exploring /rails/db (da=“Explain”) clicking around in /rails/db looking at tables development database SQLite 21.0.2.1 Text Companion: Exploring /rails/db (da=“Explain”) 21.0.3 Video Segment: SQL and ActiveRecord Intro (da=“Explain”, da=“Tutorial”) adding a record with SQL command in directors table at /rails/db/sql in the SQL Editor Ruby to performant SQL with ActiveRecord object relational mapper database transactions 21.0.3.1 Text Companion: SQL and ActiveRecord Intro (da=“Explain”, da=“HowTo”) 21.0.4 Video Segment: Creating app/models/ Classes (da=“Explain”) just showing off app/models/ files for the four tables that we would like to have not actually creating these yet review our-own-classes.md inheritance from ApplicationRecord 21.0.4.1 Text Companion: Creating app/models/ Classes (da=“Explain”) 21.0.5 Video Segment: RCAV /directors and Director Class (da=“Tutorial”) wire up /directors with RCAV database naming conventions: get(\"/directors\", { :controller =&gt; \"directors\", :action =&gt; \"index\" }), app/models/director.rb, Director class, directors table inheritence in model: Director &lt; ApplicationRecord &lt; ActiveRecord::Base .each to list database info from the one record we added manually via SQL on inherited .all method to Director create app/models/: movies.rb, actors.rb, and characters.rb 21.0.5.1 Text Companion: RCAV /directors and Director Class (da=“HowTo”) 21.0.6 Video Segment: Rails Console (da=“Tutorial”) explore Director in rails console state of terminal (pry(main)&gt; vs $) rails console quirks: pagination, quiting view, exiting 21.0.6.1 Text Companion: Rails Console (da=“HowTo”) 21.0.7 Video Segment: Reading and Creating Records (da=“Tutorial”) explore Director in rails console R and C in CRUD reading records with Director.all.at(0) creating records with .new and .save 21.0.7.1 Text Companion: Reading and Creating Records (da=“HowTo”) 21.0.8 Video Segment: sample_data (da=“Tutorial”) test data without .save rails sample_data rake task in tasks/dev.rake view /rails/db 21.0.8.1 Text Companion: sample_data (da=“HowTo”) 21.0.9 Video Segment: Finishing /directors index (da=“Tutorial”) moving Director.all from view template to controller .each to loop over @list_of_directors object, ActiveRecord::Relation formatting results into a table images with robohash (still necessary? works now…) linking to details page with flexible route and primary key, href=\"/director/&lt;%= a_director.id %&gt;\" 21.0.9.1 Text Companion: Finishing /directors Index (da=“HowTo”) 21.0.10 Video Segment: Database Query with .where (da=“Tutorial”) RCAV /directors/eldest query DB in rails console, building up to Director.where.not({ :dob =&gt; nil }).order({ :dob =&gt; :asc }).first put query into wisest action, and put @oldest director into view template app/views/director_templates/eldest.html.erb http://strftime.net/ to get .dob formatted 21.0.10.1 Text Companion: Database Query with .where (da=“HowTo”) 21.0.11 Video Segment: Flexible Routes for Director Details (da=“Tutorial”) should title be “flexible” or “dynamic”? return to unfinished “Show details” links on index page importance of placement of static /director/eldest vs. flexible /director/:an_id in config/routes.rb fetch director ID from params and query DB first in rails console aside: using tp Movie.where({ :year =&gt; 1994 }), \"title\", \"year\", \"id\" in rails console to explore table place finished query in the action director_details and the director info in the view template time_ago_in_words() 21.0.11.1 Text Companion: Flexible Routes for Director Details (da=“HowTo”) 21.0.12 Video Segment: Filmography (da=“Tutorial”) foreign keys for director_id in Movie rails console to show tp Movie.where({ :director_id =&gt; 1 }), \"title\", \"year\", \"id\" add query to director_details format filmography table in view template app/views/director_templates/show.html.erb, including the query: &lt;%= Director.where({ :id =&gt; a_film.director_id }).at(0).name %&gt; 21.0.12.1 Text Companion: Filmography (da=“HowTo”) 21.0.13 Finish and Submit MSM Queries (da=“Exercise”) "],["classroom-queries-debug.html", "22 Classroom Queries Debug", " 22 Classroom Queries Debug (da=“Exercise”) Chapters (and slides): README at https://github.com/appdev-projects/classroom-queries-debug#readme Project: https://github.com/appdev-projects/classroom-queries-debug "],["different-ruby-styles.html", "23 Different Ruby Styles", " 23 Different Ruby Styles (da=“Explain”) just read optional-syntaxes-in-ruby.md "],["history-of-ml.html", "24 History of ML", " 24 History of ML Optional Reading (da=“Explain”) many links, could be compressed, see Canvas "],["refactoring-msm-queries.html", "25 Refactoring MSM Queries", " 25 Refactoring MSM Queries Transcription refactoring-MSM-queries.md contains time-stamped sections matching the headings here Chapters (and slides): refactoring-msm-queries-with-methods.md Project: https://github.com/appdev-projects/refactoring-msm-queries-1 Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 25.0.1 Video Segment: Exploring the Target, What is Refactoring? (da=“Explain”) explore target, which is a solution to MSM Queries () technical debt, refactoring automated tests with rails grade 25.0.1.1 Text Companion: Exploring the Target, What is Refactoring? (da=“Explain”) 25.0.2 Video Segment: Actor Details show Page (da=“Explain”) examine view template and show action in app/controllers/actors_controller.rb reiterate ActiveRecord::Relation 25.0.2.1 Text Companion: Actor Details show Page (da=“Explain”) 25.0.3 Video Segment: ActiveRecord::Relation Review (da=“Explain”) rails console to explore ActiveRecord objects 25.0.3.1 Text Companion: ActiveRecord::Relation Review (da=“Explain”) 25.0.4 Video Segment: Actor Details Filmography (da=“Explain”) ActiveRecord::Relation objects in app/views/actor_templates/show.html.erb to query from Actor to Character, Character to Movie, and Movie to Director on 25.0.4.1 Text Companion: Actor Details Filmography (da=“Explain”) 25.0.5 Video Segment: Defining Instance Methods in the Model (da=“Tutorial”) define title_with_year in app/models/movie.rb see refactoring-msm-queries-with-methods.md section “Instance method review” use of self. in model method apply new method to app/views/movie_templates/show.html.erb 25.0.5.1 Text Companion: Defining Instance Methods in the Model (da=“HowTo”) 25.0.6 Video Segment: Movie#director (da=“Tutorial”) define director in app/models/movie.rb to get rid of query in view templates and replace with @the_movie.director apply new method to app/views/movie_templates/show.html.erb 1-N association 25.0.6.1 Text Companion: Movie#director (da=“HowTo”) 25.0.7 Video Segment: Director#filmography (da=“Tutorial”) other side of 1-N association define filmography in app/models/director.rb to get rid of query in view templates and replace with @the_director.filmography apply new method to app/views/director_templates/show.html.erb 25.0.7.1 Text Companion: Director#filmography (da=“HowTo”) 25.0.8 Additional Association Accessor Methods (da=“Exercise”) work independently to define additional 1-N associations: # Director#filmography (we did this!) # Movie#director (and this!) # Movie#characters # Character#movie # Actor#characters # Character#actor 25.0.9 Video Segment: Additional Association Accessor Methods Solved (da=“Tutorial”) finish 1-N association accessor methods in the models 25.0.9.1 Text Companion: Additional Association Accessor Methods Solved (da=“HowTo”) 25.0.10 Video Segment: Applying Association Accessor Methods (da=“Tutorial”) replace all DB queries with 1-N association accessor methods in the view templates 25.0.10.1 Text Companion: Applying Association Accessor Methods (da=“HowTo”) 25.0.11 Finish and Submit Refactoring MSM Queries (da=“Exercise”) "],["domain-modeling.html", "26 Domain Modeling", " 26 Domain Modeling (da=“Exercise”, da=“Explain”) see day-6-recording.md for Canvas links domain model OfferUp solution is here: https://canvas.uchicago.edu/courses/41147/assignments/465866 26.0.1 Video Segment: Ideas Tutorial (da=“Tutorial”) content does not exist dedicated tutorial for ideas.firstdraft.com with domain model for OfferUp 26.0.1.1 Text Companion: Ideas Tutorial (da=“HowTo”) can be pulled from https://canvas.uchicago.edu/courses/41147/pages/firstdraft-ideas-erd-tool "],["photogram-gui.html", "27 Photogram GUI", " 27 Photogram GUI Transcription photogram-gui.md contains time-stamped sections matching the headings here Chapters (and slides): active-record.md CRUD section (https://chapters.firstdraft.com/chapters/770#time-to-crud) Project: https://github.com/appdev-projects/photogram-gui Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 27.0.1 Video Segment: CRUD with Forms (da=“Explain”) CRUD in relation to MSM app forms for getting data into query string and then into database 27.0.1.1 Text Companion: CRUD with Forms (da=“Explain”) 27.0.2 Video Segment: Explore the Target (da=“Explain”) CRUD in relation to Photogram GUI 27.0.2.1 Text Companion: Explore the Target (da=“Explain”) 27.0.3 Video Segment: Explore the ERD (da=“Explain”) examine /rails/db, run rails sample_data examine ERD (https://github.com/appdev-projects/photogram-gui/blob/master/erd.png) discuss 1-N and N-N relationships in the domain 27.0.3.1 Text Companion: Explore the ERD (da=“Explain”) 27.0.4 Video Segment: Explore Model Classes (da=“Explain”) examine app/models/user.rb association accessor instance methods there and in other models validates (first mention, only detailed later in https://github.com/appdev-projects/msm-validations and data-integrity-with-validations.md) 27.0.4.1 Text Companion: Explore Model Classes (da=“Explain”) 27.0.5 Video Segment: Users index (da=“Tutorial”) RCAV to get table of users at /users query in index action to get ActiveRecord::Relation object @list_of_users 27.0.5.1 Text Companion: Users index (da=“HowTo”) 27.0.6 Video Segment: User Details show (da=“Tutorial”) more on validates (probably should be moved from here) RCAV a details page with flexible / dynamic routes, using /users/:path_username redirect_to if nil user, otherwise render({ :template =&gt; \"user_templates/show.html.erb\" }) “Own photos” table with association accessor methods @the_user.own_photos and a_photo.poster.username Faker gem 27.0.6.1 Text Companion: User Details show (da=“HowTo”) 27.0.7 Video Segment: Adding Navigation Links (da=“Tutorial”) add navbar links to the app/views/layouts/application.html.erb 27.0.7.1 Text Companion: Adding Navigation Links (da=“HowTo”) 27.0.8 Video Segment: Users Show Details Link (da=“Tutorial”) add show details link on /users table with href=\"/users/&lt;%= a_user.username %&gt;\" 27.0.8.1 Text Companion: Users Show Details Link (da=“HowTo”) 27.0.9 Video Segment: Photos index (da=“Tutorial”) RCAV /photos and get list of photos in index action for table in view template include show details link with href=\"/photos/&lt;%= a_photo.id %&gt;\" 27.0.9.1 Text Companion: Photos index (da=“HowTo”) 27.0.10 Video Segment: Photo Details show (da=“Tutorial”) RCAV /photos/:path_id flexible route use photo ID from URL in params in show action to get photo details and display 27.0.10.1 Text Companion: Photo Details Page (da=“HowTo”) 27.0.11 Video Segment: Photo Comments with Association Accessors (da=“Tutorial”) get “Comments” section on photo details page using @the_photo.comments.each and a_comment.commenter association accessor methods 27.0.11.1 Text Companion: Photo Comments with Association Accessors (da=“HowTo”) 27.0.12 Video Segment: Delete Photo Link (da=“Tutorial”) moving to the D in CRUD get “Delete this photo” link on photo details page by RCAVing \"/delete_photo/&lt;%= @the_photo.id %&gt;\" .destroy in the action to delete photo 27.0.12.1 Text Companion: Delete Photo Link (da=“HowTo”) 27.0.13 Video Segment: Create Photo Form (da=“Tutorial”) moving to the C in CRUD build up form in app/views/photo_templates/index.html.erb RCAV action=\"/insert_photo\" with action create fetch params from form, .save to database 27.0.13.1 Text Companion: Create Photo Form (da=“HowTo”) 27.0.14 Video Segment: Update Photo Form (da=“Tutorial”) moving to the U in CRUD build up form in app/views/photo_templates/show.html.erb RCAV action=\"/update_photo/&lt;%= @the_photo.id %&gt;\" with action update fetch params from path, .save to database 27.0.14.1 Text Companion: Update Photo Form (da=“HowTo”) 27.0.15 Finish and Submit Photogram GUI (da=“Exercise”) "],["msm-validations.html", "28 MSM Validations", " 28 MSM Validations Optional Exercise (da=“Exercise”) Un-graded assignment, but there are tests built in Chapters (and slides): ata-integrity-with-validations.md README text at https://github.com/appdev-projects/msm-validations#readme Project: https://github.com/appdev-projects/msm-validations "],["very-best-debug.html", "29 Very Best Debug", " 29 Very Best Debug Transcription very-best-debug-video.md contains time-stamped sections matching the headings here Chapters (and slides): Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 29.0.1 Video Segment: Homepage Debugging (da=“Tutorial”) RTEM to slowly debug / better_errors page console aside (da=“Explain”) 29.0.1.1 Text Companion: Homepage Debugging (da=“HowTo”) 29.0.2 Video Segment: Typos and NilClass Bug (da=“Tutorial”) RTEM to slowly debug /venues/[ID of venue] tricky bug: undefined method 'address' for nil:NilClass ActiveRecord::Relation single instance .at(0) 29.0.2.1 Text Companion: Typos and NilClass Bug (da=“HowTo”) 29.0.3 Video Segment: Association Accessor self.id Bug (da=“Tutorial”) RTEM to continue debugging /venues/[ID of venue] tricky bug: self.id in Comment#commenter, rather than self.author_id 29.0.3.1 Text Companion: Association Accessor self.id Bug (da=“HowTo”) 29.0.4 Finish and Submit Very Best Debug (da=“Exercise”) see list from README: https://github.com/appdev-projects/very-best-debug#readme "],["draft-resource-generator.html", "30 draft resource generator", " 30 draft resource generator (da=“Explain”) just a reading in draft-generators.md "],["refactoring-msm-again.html", "31 Refactoring MSM Again", " 31 Refactoring MSM Again Transcription refactoring-MSM-queries-again.md contains time-stamped sections matching the headings here Chapters (and slides): helper app: https://association-accessors.firstdraft.com/ Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 31.0.1 Video Segment: belongs_to (da=“Tutorial”, da=\"Explain) refactor 1-N Character#movie, going from the “many” to the “one” why belongs_to is better than previous method definitions aside into .joins at the rails console 31.0.1.1 Text Companion: belongs_to (da=“HowTo”) 31.0.2 Video Segment: has_many (da=“Tutorial”) refactor 1-N Movie#characters, going from the “one” to the “many” aside into method syntax for Director#filmography 31.0.2.1 Text Companion: has_many (da=“HowTo”) 31.0.3 Finish and Submit Refactoring MSM – Again! (da=“Exercise”) using https://association-accessors.firstdraft.com/ (needs a video tutorial) "],["photogram-associations.html", "32 Photogram Associations", " 32 Photogram Associations Optional Exercise (da=“Exercise”) Un-graded assignment, no tests, no rails grade has_many, belongs_to, scope, through Chapters (and slides): using https://association-accessors.firstdraft.com/ (needs a video tutorial) two readings: https://guides.rubyonrails.org/association_basics.html stretch goal: https://remimercier.com/scoped-active-record-associations/ Project: https://github.com/appdev-projects/photogram-associations "],["cookies-intro.html", "33 Cookies Intro", " 33 Cookies Intro Transcription cookies-with-video.md contains time-stamped sections matching the headings here Chapters (and slides): cookies.md Project: https://github.com/appdev-projects/cookies-intro Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 33.0.1 Video Segment: Exploring Browser Cookies (da=“Explain”) in Chrome, visit target, “Inspect” &gt; “Application” &gt; “Cookies”, Name/Value pairs 33.0.1.1 Text Companion: Exploring Browser Cookies (da=“Explain”) 33.0.2 Video Segment: cookies Object (da=“Tutorial”) explore &lt;%= cookies %&gt; on app/views/calculation_templates/addition_form.html.erb cookies.store() in add action and show in view template 33.0.2.1 Text Companion: cookies Object (da=“HowTo”) 33.0.3 Finish and Submit Cookies Intro (da=“Exercise”) see cookies.md for requirements "],["photogram-signin.html", "34 Photogram Signin", " 34 Photogram Signin (Intro to Authentication) Transcription photogram-signin.md contains time-stamped sections matching the headings here Chapters (and slides): cookies-vs-session.md Project: https://github.com/appdev-projects/photogram-signin Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 34.0.1 Video Segment: Storing Passwords (da=“Tutorial”) migration file: rails g migration AddPasswordDigestToUsers add password_digest Column to User explore db/migrate and rails db:migrate add has_secure_password to app/models/user.rb to get .password and .password_confirmation bcrypt gem 34.0.1.1 Text Companion: Storing Passwords (da=“HowTo”) 34.0.2 Video Segment: Signup Form (da=“Tutorial”) add navigation links in app/views/layouts/application.html.erb RCAV /user_sign_up copy and modify add user form found in app/views/users/index.html.erb use type=\"password\" inputs fix create action to use .password and .password_confirmation before .save control flow with :notice or :alert 34.0.2.1 Text Companion: Signup Form (da=“HowTo”) 34.0.3 Video Segment: Notices and Alerts (da=“Tutorial”) add notice and alert to app/views/layouts/application.html.erb use if ... present? control flow and style green and red 34.0.3.1 Text Companion: Notices and Alerts (da=“HowTo”) 34.0.4 Video Segment: Signout with reset_session (da=“Tutorial”) add session.store(:user_id, user.id) to create action RCAV /user_sign_out with reset_session in toast_cookies action 34.0.4.1 Text Companion: Signout with reset_session (da=“HowTo”) 34.0.5 Video Segment: Signin with post and authenticate (da=“Tutorial”) RCAV /user_sign_in with new_session_form action signin form with action=\"/verify_credentials\" and method=\"post\" authenticate action using user.authenticate and control flow 34.0.5.1 Text Companion: Signin with post and authenticate (da=“HowTo”) 34.0.6 Video Segment: Remove User-Facing IDs (da=“Tutorial”) put photo.owner_id = session.fetch(:user_id) and comment.author_id = session.fetch(:user_id) in backend create actions of add photo and add comment forms 34.0.6.1 Text Companion: Remove User-Facing IDs (da=“HowTo”) 34.0.7 Finish and Submit Photogram Signin (da=“Exercise”) "],["starting-from-scratch-with-generators.html", "35 Starting from Scratch with Generators", " 35 Starting from Scratch with Generators Day 8 Short Video Recording, which is not transcribed, additional materials (see “Todo”: https://github.com/orgs/firstdraft/projects/11/views/1) Chapters (and slides): starting-a-rails-project-from-scratch.md active-record.md draft-generators.md draft-account.md ideas.firstdraft.com generators with co-pilot Some of these steps are also done in the MSM signin video at the beginning. This can be a review. 35.0.1 Video Segment: Starting from Scratch with Generators (da=“Tutorial”) 35.0.1.1 Text Companion: Starting from Scratch with Generators (da=“HowTo”) "],["msm-signin.html", "36 MSM Signin", " 36 MSM Signin Transcription MSM-signin.md contains time-stamped sections matching the headings here Chapters (and slides): draft-generators.md draft-account.md Project: https://github.com/appdev-projects/msm-signin Workspace open, tabs organized, aware of /git committing and rails grade. Link to technical setup. 36.0.1 Video Segment: Exploring the Target (da=“Explain”) show off signin, out, up, and /bookmarks in the target 36.0.1.1 Text Companion: Exploring the Target (da=“Explain”) 36.0.2 Video Segment: Creating movies with generate model (da=“Tutorial”) run rails generate model movie in our blank app explore file in db/migrate/ run rails db:migrate visit /rails/db 36.0.2.1 Text Companion: Creating movies with generate model (da=“HowTo”) 36.0.3 Video Segment: Creating movies with generate draft:resource (da=“Tutorial”) run rails db:rollback then rails generate draft:resource movie explore config/routes.rb to view CRUD routes explore app/controllers/movies_controller.rb to view CRUD actions explore generated view templates run rails db:migrate aside into schema.rb and migration versioning 36.0.3.1 Text Companion: Creating movies with generate draft:resource (da=“HowTo”) 36.0.4 Video Segment: generate draft:resource for Entire Database (da=“Tutorial”) run rails db:rollback then rails generate draft:resource and rails db:migrate for all tables in database 36.0.4.1 Text Companion: generate draft:resource for Entire Database (da=“HowTo”) 36.0.5 Video Segment: Association Accessor Methods (da=“Tutorial”) use belongs_to and has_many on the table models can use https://association-accessors.firstdraft.com 36.0.5.1 Text Companion: Association Accessor Methods (da=“HowTo”) 36.0.6 Video Segment: Nav Links and sample_data (da=“Tutorial”) add links to app/views/layouts/application.html.erb run sample_data point out loading data from a CSV and adding a sample_data rake task 36.0.6.1 Text Companion: Nav Links and sample_data (da=“HowTo”) 36.0.7 Video Segment: validates and Summarize Startup (da=“Tutorial”) add validates :title, :presence =&gt; true to app/models/movie.rb summarize starting from scratch steps 36.0.7.1 Text Companion: validates and Summarize Startup (da=“HowTo”) 36.0.8 Video Segment: generate draft:account (da=“Tutorial”) getting users table with draft:account explore new CRUD routes, models, and actions 36.0.8.1 Text Companion: generate draft:account (da=“HowTo”) 36.0.9 Video Segment: Conditional Links, Alerts, and Notices (da=“Tutorial”) control flow showing of links in app/views/layouts/application.html.erb using if session.fetch(:user_id) == nil explore :alert and :notice in app/controllers/movies_controller.rb add alerts and notices to application layout 36.0.9.1 Text Companion: Conditional Links, Alerts, and Notices (da=“HowTo”) 36.0.10 Video Segment: Bookmark (da=“Tutorial”) run rails generate draft:resource bookmark tailoring user experience by allowing them to add records to a join table create action=\"/insert_bookmark\" form in app/views/movies/show.html.erb use the provided CRUD action, changing parameter names to matchup 36.0.10.1 Text Companion: Bookmark (da=“HowTo”) 36.0.11 Video Segment: Un-Bookmark (da=“Tutorial”) add conditional flow to bookmark action with Bookmark.where({ :movie_id =&gt; @the_movie.id, :user_id =&gt; session.fetch(:user_id) }) add href=\"/delete_bookmark/&lt;%= the_bookmark.id %&gt;\" link 36.0.11.1 Text Companion: Un-Bookmark (da=“HowTo”) 36.0.12 Video Segment: Bookmark Index for Current User (da=“Tutorial”) conditional flow to application layout for showing bookmarks modify index action in app/controllers/bookmarks_controller.rb three primary uses of session.fetch(:user_id) cookie define association accessor methods in user, bookmark, and movie models 36.0.12.1 Text Companion: Bookmark Index for Current User (da=“HowTo”) 36.0.13 Video Segment: @current_user (da=“Tutorial”) add load_current_user action to app/controllers/bookmarks_controller.rb to get @current_user use before_action(:load_current_user) in app/controllers/application_controller.rb to get @current_user everywhere apply @current_user.bookmarks in bookmarks index action 36.0.13.1 Text Companion: @current_user (da=“HowTo”) 36.0.14 Video Segment: Bookmark Drop-Down Form (da=“Tutorial”) create a drop-down form on app/views/bookmarks/index.html.erb using &lt;select name=\"query_movie_id\"&gt; with &lt;option value=\"&lt;%= a_movie.id %&gt;\"&gt; hiding ID keys from user 36.0.14.1 Text Companion: Bookmark Drop-Down Form (da=“HowTo”) 36.0.15 Finish and Submit MSM Signin (da=“Exercise”) "],["bootstrap-intro-with-task-list.html", "37 Bootstrap Intro with Task List", " 37 Bootstrap Intro with Task List (da=“Exercise”) This video is not yet transcribed because it was a lot of visual show-and-tell. Here are some time-stamp notes for things that could be transcribed: 00:19:00 to 00:30:49: useful validates, has_many, reset_session, new stuff and review 00:31:40 to 00:42:45: sample_data task (already chapter sample-data.md, but chapter uses Photogram and here done with Task List) 00:51:06 to 00:53:28: force_user_sign_in and skip_before_action is covered for the first time. "],["photogram-final.html", "38 Photogram Final", " 38 Photogram Final photogram-final.md https://github.com/appdev-projects/photogram-final "],["building-your-own-idea.html", "39 Building Your Own Idea", " 39 Building Your Own Idea long text with links to github and starting from scratch: https://canvas.uchicago.edu/courses/41147/assignments/465848 "],["extra-topics.html", "40 Extra Topics", " 40 Extra Topics extra topics, none of this is touched or transcribed: https://canvas.uchicago.edu/courses/41147/pages/extra-topics-written-guides-and-videos chapters: ransack.md image-uploads.md loading-data-from-a-csv-file-into-your-database.md google-map.md exporting-data-into-a-csv.md web-scraping-quickstart.md "],["terminology-technical-reference.html", "A Terminology Technical Reference", " A Terminology Technical Reference "],["ruby-technical-reference.html", "B Ruby Technical Reference", " B Ruby Technical Reference "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
